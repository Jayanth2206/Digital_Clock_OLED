
OLED_DIGI_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000390c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ed0  08003a94  08003a94  00013a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006964  08006964  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08006964  08006964  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006964  08006964  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800696c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  2000002c  08006998  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08006998  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d740  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002224  00000000  00000000  0002d79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002f9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00030628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a4f  00000000  00000000  00031170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecfb  00000000  00000000  00057bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebead  00000000  00000000  000668ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003188  00000000  00000000  001527b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a7c 	.word	0x08003a7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08003a7c 	.word	0x08003a7c

080001c8 <OLED_init>:
void OLED_init();


/* USER CODE BEGIN PV */
void OLED_init()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    ssd1306_TestAll();
 80001cc:	f000 fc38 	bl	8000a40 <ssd1306_TestAll>
}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fd92 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f8a8 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f9aa 	bl	8000538 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001e4:	f000 f8f8 	bl	80003d8 <MX_I2C1_Init>
  MX_RTC_Init();
 80001e8:	f000 f936 	bl	8000458 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  OLED_init();
 80001ec:	f7ff ffec 	bl	80001c8 <OLED_init>
   while (1)
   {

 		 //HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);

 		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80001f0:	2200      	movs	r2, #0
 80001f2:	493e      	ldr	r1, [pc, #248]	; (80002ec <main+0x118>)
 80001f4:	483e      	ldr	r0, [pc, #248]	; (80002f0 <main+0x11c>)
 80001f6:	f003 f987 	bl	8003508 <HAL_RTC_GetTime>
     HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80001fa:	2200      	movs	r2, #0
 80001fc:	493d      	ldr	r1, [pc, #244]	; (80002f4 <main+0x120>)
 80001fe:	483c      	ldr	r0, [pc, #240]	; (80002f0 <main+0x11c>)
 8000200:	f003 fa65 	bl	80036ce <HAL_RTC_GetDate>

 		new_day=currDate.WeekDay;
 8000204:	4b3b      	ldr	r3, [pc, #236]	; (80002f4 <main+0x120>)
 8000206:	781a      	ldrb	r2, [r3, #0]
 8000208:	4b3b      	ldr	r3, [pc, #236]	; (80002f8 <main+0x124>)
 800020a:	701a      	strb	r2, [r3, #0]
 		new_date=currDate.Date;
 800020c:	4b39      	ldr	r3, [pc, #228]	; (80002f4 <main+0x120>)
 800020e:	789a      	ldrb	r2, [r3, #2]
 8000210:	4b3a      	ldr	r3, [pc, #232]	; (80002fc <main+0x128>)
 8000212:	701a      	strb	r2, [r3, #0]
 		new_month=currDate.Month;
 8000214:	4b37      	ldr	r3, [pc, #220]	; (80002f4 <main+0x120>)
 8000216:	785a      	ldrb	r2, [r3, #1]
 8000218:	4b39      	ldr	r3, [pc, #228]	; (8000300 <main+0x12c>)
 800021a:	701a      	strb	r2, [r3, #0]
 		new_year=currDate.Year;
 800021c:	4b35      	ldr	r3, [pc, #212]	; (80002f4 <main+0x120>)
 800021e:	78da      	ldrb	r2, [r3, #3]
 8000220:	4b38      	ldr	r3, [pc, #224]	; (8000304 <main+0x130>)
 8000222:	701a      	strb	r2, [r3, #0]

 		new_hrs=currTime.Hours;
 8000224:	4b31      	ldr	r3, [pc, #196]	; (80002ec <main+0x118>)
 8000226:	781a      	ldrb	r2, [r3, #0]
 8000228:	4b37      	ldr	r3, [pc, #220]	; (8000308 <main+0x134>)
 800022a:	701a      	strb	r2, [r3, #0]
 		new_mins=currTime.Minutes;
 800022c:	4b2f      	ldr	r3, [pc, #188]	; (80002ec <main+0x118>)
 800022e:	785a      	ldrb	r2, [r3, #1]
 8000230:	4b36      	ldr	r3, [pc, #216]	; (800030c <main+0x138>)
 8000232:	701a      	strb	r2, [r3, #0]
 		new_secs=currTime.Seconds;
 8000234:	4b2d      	ldr	r3, [pc, #180]	; (80002ec <main+0x118>)
 8000236:	789a      	ldrb	r2, [r3, #2]
 8000238:	4b35      	ldr	r3, [pc, #212]	; (8000310 <main+0x13c>)
 800023a:	701a      	strb	r2, [r3, #0]

     /* USER CODE END WHILE */
 		 ssd1306_Fill(White);
 800023c:	2001      	movs	r0, #1
 800023e:	f000 fa4b 	bl	80006d8 <ssd1306_Fill>
     ssd1306_SetCursor(4, 0);
 8000242:	2100      	movs	r1, #0
 8000244:	2004      	movs	r0, #4
 8000246:	f000 fba1 	bl	800098c <ssd1306_SetCursor>
     ssd1306_WriteString("DIGI-CLOCK", Font_11x18, Black);
 800024a:	4a32      	ldr	r2, [pc, #200]	; (8000314 <main+0x140>)
 800024c:	2300      	movs	r3, #0
 800024e:	ca06      	ldmia	r2, {r1, r2}
 8000250:	4831      	ldr	r0, [pc, #196]	; (8000318 <main+0x144>)
 8000252:	f000 fb75 	bl	8000940 <ssd1306_WriteString>
 		ssd1306_SetCursor(2, 25);
 8000256:	2119      	movs	r1, #25
 8000258:	2002      	movs	r0, #2
 800025a:	f000 fb97 	bl	800098c <ssd1306_SetCursor>
     ssd1306_WriteString("DATE:", Font_7x10, Black);
 800025e:	4a2f      	ldr	r2, [pc, #188]	; (800031c <main+0x148>)
 8000260:	2300      	movs	r3, #0
 8000262:	ca06      	ldmia	r2, {r1, r2}
 8000264:	482e      	ldr	r0, [pc, #184]	; (8000320 <main+0x14c>)
 8000266:	f000 fb6b 	bl	8000940 <ssd1306_WriteString>
 		ssd1306_SetCursor(30, 25);
 800026a:	2119      	movs	r1, #25
 800026c:	201e      	movs	r0, #30
 800026e:	f000 fb8d 	bl	800098c <ssd1306_SetCursor>
     ssd1306_WriteString((uint8_t)(new_date), Font_7x10, Black);
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <main+0x128>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	4618      	mov	r0, r3
 8000278:	4a28      	ldr	r2, [pc, #160]	; (800031c <main+0x148>)
 800027a:	2300      	movs	r3, #0
 800027c:	ca06      	ldmia	r2, {r1, r2}
 800027e:	f000 fb5f 	bl	8000940 <ssd1306_WriteString>
 		ssd1306_SetCursor(40, 25);
 8000282:	2119      	movs	r1, #25
 8000284:	2028      	movs	r0, #40	; 0x28
 8000286:	f000 fb81 	bl	800098c <ssd1306_SetCursor>
     ssd1306_WriteChar('/', Font_7x10, Black);
 800028a:	4a24      	ldr	r2, [pc, #144]	; (800031c <main+0x148>)
 800028c:	2300      	movs	r3, #0
 800028e:	ca06      	ldmia	r2, {r1, r2}
 8000290:	202f      	movs	r0, #47	; 0x2f
 8000292:	f000 facd 	bl	8000830 <ssd1306_WriteChar>
 		ssd1306_SetCursor(45, 25);
 8000296:	2119      	movs	r1, #25
 8000298:	202d      	movs	r0, #45	; 0x2d
 800029a:	f000 fb77 	bl	800098c <ssd1306_SetCursor>
     ssd1306_WriteString("new_month", Font_7x10, Black);
 800029e:	4a1f      	ldr	r2, [pc, #124]	; (800031c <main+0x148>)
 80002a0:	2300      	movs	r3, #0
 80002a2:	ca06      	ldmia	r2, {r1, r2}
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <main+0x150>)
 80002a6:	f000 fb4b 	bl	8000940 <ssd1306_WriteString>
 		ssd1306_SetCursor(40, 25);
 80002aa:	2119      	movs	r1, #25
 80002ac:	2028      	movs	r0, #40	; 0x28
 80002ae:	f000 fb6d 	bl	800098c <ssd1306_SetCursor>
     ssd1306_WriteChar('/', Font_7x10, Black);
 80002b2:	4a1a      	ldr	r2, [pc, #104]	; (800031c <main+0x148>)
 80002b4:	2300      	movs	r3, #0
 80002b6:	ca06      	ldmia	r2, {r1, r2}
 80002b8:	202f      	movs	r0, #47	; 0x2f
 80002ba:	f000 fab9 	bl	8000830 <ssd1306_WriteChar>
 		ssd1306_SetCursor(55, 25);
 80002be:	2119      	movs	r1, #25
 80002c0:	2037      	movs	r0, #55	; 0x37
 80002c2:	f000 fb63 	bl	800098c <ssd1306_SetCursor>
     ssd1306_WriteString("new_year", Font_7x10, Black);
 80002c6:	4a15      	ldr	r2, [pc, #84]	; (800031c <main+0x148>)
 80002c8:	2300      	movs	r3, #0
 80002ca:	ca06      	ldmia	r2, {r1, r2}
 80002cc:	4816      	ldr	r0, [pc, #88]	; (8000328 <main+0x154>)
 80002ce:	f000 fb37 	bl	8000940 <ssd1306_WriteString>
     ssd1306_SetCursor(2, 46);//16+16);
 80002d2:	212e      	movs	r1, #46	; 0x2e
 80002d4:	2002      	movs	r0, #2
 80002d6:	f000 fb59 	bl	800098c <ssd1306_SetCursor>
     ssd1306_WriteString("TIME:09:45:25", Font_7x10, Black);
 80002da:	4a10      	ldr	r2, [pc, #64]	; (800031c <main+0x148>)
 80002dc:	2300      	movs	r3, #0
 80002de:	ca06      	ldmia	r2, {r1, r2}
 80002e0:	4812      	ldr	r0, [pc, #72]	; (800032c <main+0x158>)
 80002e2:	f000 fb2d 	bl	8000940 <ssd1306_WriteString>
 //    ssd1306_SetCursor(2, 46);//16+18+10);
 //    ssd1306_WriteString("B: 418V", Font_11x18, Black);
 		 ssd1306_UpdateScreen();
 80002e6:	f000 fa1b 	bl	8000720 <ssd1306_UpdateScreen>
 		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80002ea:	e781      	b.n	80001f0 <main+0x1c>
 80002ec:	200000c8 	.word	0x200000c8
 80002f0:	2000009c 	.word	0x2000009c
 80002f4:	200000dc 	.word	0x200000dc
 80002f8:	200000c0 	.word	0x200000c0
 80002fc:	200000c1 	.word	0x200000c1
 8000300:	200000c2 	.word	0x200000c2
 8000304:	200000c3 	.word	0x200000c3
 8000308:	200000c4 	.word	0x200000c4
 800030c:	200000c5 	.word	0x200000c5
 8000310:	200000c6 	.word	0x200000c6
 8000314:	20000010 	.word	0x20000010
 8000318:	08003a94 	.word	0x08003a94
 800031c:	20000008 	.word	0x20000008
 8000320:	08003aa0 	.word	0x08003aa0
 8000324:	08003aa8 	.word	0x08003aa8
 8000328:	08003ab4 	.word	0x08003ab4
 800032c:	08003ac0 	.word	0x08003ac0

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b096      	sub	sp, #88	; 0x58
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	2244      	movs	r2, #68	; 0x44
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f003 fb94 	bl	8003a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	463b      	mov	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000352:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000356:	f001 fce5 	bl	8001d24 <HAL_PWREx_ControlVoltageScaling>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000360:	f000 f90e 	bl	8000580 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000364:	230a      	movs	r3, #10
 8000366:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800036c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	2310      	movs	r3, #16
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000372:	2301      	movs	r3, #1
 8000374:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000376:	2302      	movs	r3, #2
 8000378:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037a:	2302      	movs	r3, #2
 800037c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800037e:	2301      	movs	r3, #1
 8000380:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000382:	2308      	movs	r3, #8
 8000384:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000386:	2307      	movs	r3, #7
 8000388:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800038a:	2302      	movs	r3, #2
 800038c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800038e:	2302      	movs	r3, #2
 8000390:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	f107 0314 	add.w	r3, r7, #20
 8000396:	4618      	mov	r0, r3
 8000398:	f001 fd1a 	bl	8001dd0 <HAL_RCC_OscConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80003a2:	f000 f8ed 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	230f      	movs	r3, #15
 80003a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003aa:	2303      	movs	r3, #3
 80003ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003ba:	463b      	mov	r3, r7
 80003bc:	2103      	movs	r1, #3
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 f8e2 	bl	8002588 <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003ca:	f000 f8d9 	bl	8000580 <Error_Handler>
  }
}
 80003ce:	bf00      	nop
 80003d0:	3758      	adds	r7, #88	; 0x58
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	; (800044c <MX_I2C1_Init+0x74>)
 80003de:	4a1c      	ldr	r2, [pc, #112]	; (8000450 <MX_I2C1_Init+0x78>)
 80003e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_I2C1_Init+0x74>)
 80003e4:	4a1b      	ldr	r2, [pc, #108]	; (8000454 <MX_I2C1_Init+0x7c>)
 80003e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003e8:	4b18      	ldr	r3, [pc, #96]	; (800044c <MX_I2C1_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_I2C1_Init+0x74>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f4:	4b15      	ldr	r3, [pc, #84]	; (800044c <MX_I2C1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003fa:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_I2C1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <MX_I2C1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_I2C1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_I2C1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000412:	480e      	ldr	r0, [pc, #56]	; (800044c <MX_I2C1_Init+0x74>)
 8000414:	f000 ffd0 	bl	80013b8 <HAL_I2C_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800041e:	f000 f8af 	bl	8000580 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000422:	2100      	movs	r1, #0
 8000424:	4809      	ldr	r0, [pc, #36]	; (800044c <MX_I2C1_Init+0x74>)
 8000426:	f001 fbd7 	bl	8001bd8 <HAL_I2CEx_ConfigAnalogFilter>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000430:	f000 f8a6 	bl	8000580 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000434:	2100      	movs	r1, #0
 8000436:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_I2C1_Init+0x74>)
 8000438:	f001 fc19 	bl	8001c6e <HAL_I2CEx_ConfigDigitalFilter>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000442:	f000 f89d 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000048 	.word	0x20000048
 8000450:	40005400 	.word	0x40005400
 8000454:	00602173 	.word	0x00602173

08000458 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800046c:	2300      	movs	r3, #0
 800046e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000470:	4b2f      	ldr	r3, [pc, #188]	; (8000530 <MX_RTC_Init+0xd8>)
 8000472:	4a30      	ldr	r2, [pc, #192]	; (8000534 <MX_RTC_Init+0xdc>)
 8000474:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000476:	4b2e      	ldr	r3, [pc, #184]	; (8000530 <MX_RTC_Init+0xd8>)
 8000478:	2240      	movs	r2, #64	; 0x40
 800047a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800047c:	4b2c      	ldr	r3, [pc, #176]	; (8000530 <MX_RTC_Init+0xd8>)
 800047e:	227f      	movs	r2, #127	; 0x7f
 8000480:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000482:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <MX_RTC_Init+0xd8>)
 8000484:	22ff      	movs	r2, #255	; 0xff
 8000486:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000488:	4b29      	ldr	r3, [pc, #164]	; (8000530 <MX_RTC_Init+0xd8>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800048e:	4b28      	ldr	r3, [pc, #160]	; (8000530 <MX_RTC_Init+0xd8>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000494:	4b26      	ldr	r3, [pc, #152]	; (8000530 <MX_RTC_Init+0xd8>)
 8000496:	2200      	movs	r2, #0
 8000498:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <MX_RTC_Init+0xd8>)
 800049c:	2200      	movs	r2, #0
 800049e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004a0:	4823      	ldr	r0, [pc, #140]	; (8000530 <MX_RTC_Init+0xd8>)
 80004a2:	f002 ff19 	bl	80032d8 <HAL_RTC_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80004ac:	f000 f868 	bl	8000580 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x37;
 80004b4:	2337      	movs	r3, #55	; 0x37
 80004b6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80004bc:	2300      	movs	r3, #0
 80004be:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	4818      	ldr	r0, [pc, #96]	; (8000530 <MX_RTC_Init+0xd8>)
 80004d0:	f002 ff7d 	bl	80033ce <HAL_RTC_SetTime>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80004da:	f000 f851 	bl	8000580 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80004de:	2303      	movs	r3, #3
 80004e0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80004e2:	2307      	movs	r3, #7
 80004e4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x20;
 80004e6:	2320      	movs	r3, #32
 80004e8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80004ea:	2322      	movs	r3, #34	; 0x22
 80004ec:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80004ee:	463b      	mov	r3, r7
 80004f0:	2201      	movs	r2, #1
 80004f2:	4619      	mov	r1, r3
 80004f4:	480e      	ldr	r0, [pc, #56]	; (8000530 <MX_RTC_Init+0xd8>)
 80004f6:	f003 f863 	bl	80035c0 <HAL_RTC_SetDate>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8000500:	f000 f83e 	bl	8000580 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	4809      	ldr	r0, [pc, #36]	; (8000530 <MX_RTC_Init+0xd8>)
 800050a:	f003 f9ff 	bl	800390c <HAL_RTCEx_SetTimeStamp>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8000514:	f000 f834 	bl	8000580 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_RTC_Init+0xd8>)
 800051a:	f003 fa3f 	bl	800399c <HAL_RTCEx_SetRefClock>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8000524:	f000 f82c 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2000009c 	.word	0x2000009c
 8000534:	40002800 	.word	0x40002800

08000538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_GPIO_Init+0x44>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <MX_GPIO_Init+0x44>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_GPIO_Init+0x44>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_GPIO_Init+0x44>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a08      	ldr	r2, [pc, #32]	; (800057c <MX_GPIO_Init+0x44>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_GPIO_Init+0x44>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <Error_Handler+0x8>

0800058a <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af04      	add	r7, sp, #16
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	9302      	str	r3, [sp, #8]
 80005a8:	2301      	movs	r3, #1
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2301      	movs	r3, #1
 80005b2:	2200      	movs	r2, #0
 80005b4:	2178      	movs	r1, #120	; 0x78
 80005b6:	4803      	ldr	r0, [pc, #12]	; (80005c4 <ssd1306_WriteCommand+0x2c>)
 80005b8:	f000 ff8e 	bl	80014d8 <HAL_I2C_Mem_Write>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000048 	.word	0x20000048

080005c8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af04      	add	r7, sp, #16
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	f04f 32ff 	mov.w	r2, #4294967295
 80005da:	9202      	str	r2, [sp, #8]
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	2240      	movs	r2, #64	; 0x40
 80005e6:	2178      	movs	r1, #120	; 0x78
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <ssd1306_WriteData+0x30>)
 80005ea:	f000 ff75 	bl	80014d8 <HAL_I2C_Mem_Write>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000048 	.word	0x20000048

080005fc <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000600:	f7ff ffc3 	bl	800058a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f000 fbf7 	bl	8000df8 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 800060a:	20ae      	movs	r0, #174	; 0xae
 800060c:	f7ff ffc4 	bl	8000598 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8000610:	2020      	movs	r0, #32
 8000612:	f7ff ffc1 	bl	8000598 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ffbe 	bl	8000598 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800061c:	20b0      	movs	r0, #176	; 0xb0
 800061e:	f7ff ffbb 	bl	8000598 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000622:	20c8      	movs	r0, #200	; 0xc8
 8000624:	f7ff ffb8 	bl	8000598 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000628:	2000      	movs	r0, #0
 800062a:	f7ff ffb5 	bl	8000598 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800062e:	2010      	movs	r0, #16
 8000630:	f7ff ffb2 	bl	8000598 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000634:	2040      	movs	r0, #64	; 0x40
 8000636:	f7ff ffaf 	bl	8000598 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800063a:	2081      	movs	r0, #129	; 0x81
 800063c:	f7ff ffac 	bl	8000598 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8000640:	20ff      	movs	r0, #255	; 0xff
 8000642:	f7ff ffa9 	bl	8000598 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000646:	20a1      	movs	r0, #161	; 0xa1
 8000648:	f7ff ffa6 	bl	8000598 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800064c:	20a6      	movs	r0, #166	; 0xa6
 800064e:	f7ff ffa3 	bl	8000598 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000652:	20a8      	movs	r0, #168	; 0xa8
 8000654:	f7ff ffa0 	bl	8000598 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8000658:	203f      	movs	r0, #63	; 0x3f
 800065a:	f7ff ff9d 	bl	8000598 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800065e:	20a4      	movs	r0, #164	; 0xa4
 8000660:	f7ff ff9a 	bl	8000598 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000664:	20d3      	movs	r0, #211	; 0xd3
 8000666:	f7ff ff97 	bl	8000598 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff ff94 	bl	8000598 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000670:	20d5      	movs	r0, #213	; 0xd5
 8000672:	f7ff ff91 	bl	8000598 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000676:	20f0      	movs	r0, #240	; 0xf0
 8000678:	f7ff ff8e 	bl	8000598 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800067c:	20d9      	movs	r0, #217	; 0xd9
 800067e:	f7ff ff8b 	bl	8000598 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000682:	2022      	movs	r0, #34	; 0x22
 8000684:	f7ff ff88 	bl	8000598 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000688:	20da      	movs	r0, #218	; 0xda
 800068a:	f7ff ff85 	bl	8000598 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 800068e:	2012      	movs	r0, #18
 8000690:	f7ff ff82 	bl	8000598 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000694:	20db      	movs	r0, #219	; 0xdb
 8000696:	f7ff ff7f 	bl	8000598 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800069a:	2020      	movs	r0, #32
 800069c:	f7ff ff7c 	bl	8000598 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80006a0:	208d      	movs	r0, #141	; 0x8d
 80006a2:	f7ff ff79 	bl	8000598 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80006a6:	2014      	movs	r0, #20
 80006a8:	f7ff ff76 	bl	8000598 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80006ac:	20af      	movs	r0, #175	; 0xaf
 80006ae:	f7ff ff73 	bl	8000598 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f810 	bl	80006d8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80006b8:	f000 f832 	bl	8000720 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <ssd1306_Init+0xd8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <ssd1306_Init+0xd8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <ssd1306_Init+0xd8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	715a      	strb	r2, [r3, #5]
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200004e0 	.word	0x200004e0

080006d8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	e00d      	b.n	8000704 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d101      	bne.n	80006f2 <ssd1306_Fill+0x1a>
 80006ee:	2100      	movs	r1, #0
 80006f0:	e000      	b.n	80006f4 <ssd1306_Fill+0x1c>
 80006f2:	21ff      	movs	r1, #255	; 0xff
 80006f4:	4a09      	ldr	r2, [pc, #36]	; (800071c <ssd1306_Fill+0x44>)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4413      	add	r3, r2
 80006fa:	460a      	mov	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800070a:	d3ed      	bcc.n	80006e8 <ssd1306_Fill+0x10>
    }
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	200000e0 	.word	0x200000e0

08000720 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	e016      	b.n	800075a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	3b50      	subs	r3, #80	; 0x50
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff30 	bl	8000598 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ff2d 	bl	8000598 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800073e:	2010      	movs	r0, #16
 8000740:	f7ff ff2a 	bl	8000598 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	01db      	lsls	r3, r3, #7
 8000748:	4a08      	ldr	r2, [pc, #32]	; (800076c <ssd1306_UpdateScreen+0x4c>)
 800074a:	4413      	add	r3, r2
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff3a 	bl	80005c8 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	3301      	adds	r3, #1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b07      	cmp	r3, #7
 800075e:	d9e5      	bls.n	800072c <ssd1306_UpdateScreen+0xc>
    }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000e0 	.word	0x200000e0

08000770 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	460b      	mov	r3, r1
 800077c:	71bb      	strb	r3, [r7, #6]
 800077e:	4613      	mov	r3, r2
 8000780:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	2b00      	cmp	r3, #0
 8000788:	db48      	blt.n	800081c <ssd1306_DrawPixel+0xac>
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	2b3f      	cmp	r3, #63	; 0x3f
 800078e:	d845      	bhi.n	800081c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <ssd1306_DrawPixel+0xb8>)
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d006      	beq.n	80007a6 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000798:	797b      	ldrb	r3, [r7, #5]
 800079a:	2b00      	cmp	r3, #0
 800079c:	bf0c      	ite	eq
 800079e:	2301      	moveq	r3, #1
 80007a0:	2300      	movne	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80007a6:	797b      	ldrb	r3, [r7, #5]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d11a      	bne.n	80007e2 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80007ac:	79fa      	ldrb	r2, [r7, #7]
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	08db      	lsrs	r3, r3, #3
 80007b2:	b2d8      	uxtb	r0, r3
 80007b4:	4603      	mov	r3, r0
 80007b6:	01db      	lsls	r3, r3, #7
 80007b8:	4413      	add	r3, r2
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <ssd1306_DrawPixel+0xbc>)
 80007bc:	5cd3      	ldrb	r3, [r2, r3]
 80007be:	b25a      	sxtb	r2, r3
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	2101      	movs	r1, #1
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	4313      	orrs	r3, r2
 80007d0:	b259      	sxtb	r1, r3
 80007d2:	79fa      	ldrb	r2, [r7, #7]
 80007d4:	4603      	mov	r3, r0
 80007d6:	01db      	lsls	r3, r3, #7
 80007d8:	4413      	add	r3, r2
 80007da:	b2c9      	uxtb	r1, r1
 80007dc:	4a13      	ldr	r2, [pc, #76]	; (800082c <ssd1306_DrawPixel+0xbc>)
 80007de:	54d1      	strb	r1, [r2, r3]
 80007e0:	e01d      	b.n	800081e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80007e2:	79fa      	ldrb	r2, [r7, #7]
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	b2d8      	uxtb	r0, r3
 80007ea:	4603      	mov	r3, r0
 80007ec:	01db      	lsls	r3, r3, #7
 80007ee:	4413      	add	r3, r2
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <ssd1306_DrawPixel+0xbc>)
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	b25a      	sxtb	r2, r3
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	b25b      	sxtb	r3, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	b25b      	sxtb	r3, r3
 8000808:	4013      	ands	r3, r2
 800080a:	b259      	sxtb	r1, r3
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	4603      	mov	r3, r0
 8000810:	01db      	lsls	r3, r3, #7
 8000812:	4413      	add	r3, r2
 8000814:	b2c9      	uxtb	r1, r1
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <ssd1306_DrawPixel+0xbc>)
 8000818:	54d1      	strb	r1, [r2, r3]
 800081a:	e000      	b.n	800081e <ssd1306_DrawPixel+0xae>
        return;
 800081c:	bf00      	nop
    }
}
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	200004e0 	.word	0x200004e0
 800082c:	200000e0 	.word	0x200000e0

08000830 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b089      	sub	sp, #36	; 0x24
 8000834:	af00      	add	r7, sp, #0
 8000836:	4604      	mov	r4, r0
 8000838:	1d38      	adds	r0, r7, #4
 800083a:	e880 0006 	stmia.w	r0, {r1, r2}
 800083e:	461a      	mov	r2, r3
 8000840:	4623      	mov	r3, r4
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	4613      	mov	r3, r2
 8000846:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b1f      	cmp	r3, #31
 800084c:	d902      	bls.n	8000854 <ssd1306_WriteChar+0x24>
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	2b7e      	cmp	r3, #126	; 0x7e
 8000852:	d901      	bls.n	8000858 <ssd1306_WriteChar+0x28>
        return 0;
 8000854:	2300      	movs	r3, #0
 8000856:	e06d      	b.n	8000934 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000858:	4b38      	ldr	r3, [pc, #224]	; (800093c <ssd1306_WriteChar+0x10c>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	793b      	ldrb	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	2b80      	cmp	r3, #128	; 0x80
 8000864:	dc06      	bgt.n	8000874 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000866:	4b35      	ldr	r3, [pc, #212]	; (800093c <ssd1306_WriteChar+0x10c>)
 8000868:	885b      	ldrh	r3, [r3, #2]
 800086a:	461a      	mov	r2, r3
 800086c:	797b      	ldrb	r3, [r7, #5]
 800086e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000870:	2b40      	cmp	r3, #64	; 0x40
 8000872:	dd01      	ble.n	8000878 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000874:	2300      	movs	r3, #0
 8000876:	e05d      	b.n	8000934 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	e04c      	b.n	8000918 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	3b20      	subs	r3, #32
 8000884:	7979      	ldrb	r1, [r7, #5]
 8000886:	fb01 f303 	mul.w	r3, r1, r3
 800088a:	4619      	mov	r1, r3
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	440b      	add	r3, r1
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	e034      	b.n	8000908 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d012      	beq.n	80008d4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <ssd1306_WriteChar+0x10c>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	b2d8      	uxtb	r0, r3
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <ssd1306_WriteChar+0x10c>)
 80008be:	885b      	ldrh	r3, [r3, #2]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4413      	add	r3, r2
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	7bba      	ldrb	r2, [r7, #14]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f7ff ff4f 	bl	8000770 <ssd1306_DrawPixel>
 80008d2:	e016      	b.n	8000902 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <ssd1306_WriteChar+0x10c>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4413      	add	r3, r2
 80008e0:	b2d8      	uxtb	r0, r3
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <ssd1306_WriteChar+0x10c>)
 80008e4:	885b      	ldrh	r3, [r3, #2]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	b2d9      	uxtb	r1, r3
 80008f0:	7bbb      	ldrb	r3, [r7, #14]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf0c      	ite	eq
 80008f6:	2301      	moveq	r3, #1
 80008f8:	2300      	movne	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	f7ff ff37 	bl	8000770 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	3301      	adds	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	793b      	ldrb	r3, [r7, #4]
 800090a:	461a      	mov	r2, r3
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	4293      	cmp	r3, r2
 8000910:	d3c5      	bcc.n	800089e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3301      	adds	r3, #1
 8000916:	61fb      	str	r3, [r7, #28]
 8000918:	797b      	ldrb	r3, [r7, #5]
 800091a:	461a      	mov	r2, r3
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	4293      	cmp	r3, r2
 8000920:	d3ad      	bcc.n	800087e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <ssd1306_WriteChar+0x10c>)
 8000924:	881a      	ldrh	r2, [r3, #0]
 8000926:	793b      	ldrb	r3, [r7, #4]
 8000928:	b29b      	uxth	r3, r3
 800092a:	4413      	add	r3, r2
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b03      	ldr	r3, [pc, #12]	; (800093c <ssd1306_WriteChar+0x10c>)
 8000930:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3724      	adds	r7, #36	; 0x24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	200004e0 	.word	0x200004e0

08000940 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	1d38      	adds	r0, r7, #4
 800094a:	e880 0006 	stmia.w	r0, {r1, r2}
 800094e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000950:	e012      	b.n	8000978 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	7818      	ldrb	r0, [r3, #0]
 8000956:	78fb      	ldrb	r3, [r7, #3]
 8000958:	1d3a      	adds	r2, r7, #4
 800095a:	ca06      	ldmia	r2, {r1, r2}
 800095c:	f7ff ff68 	bl	8000830 <ssd1306_WriteChar>
 8000960:	4603      	mov	r3, r0
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	d002      	beq.n	8000972 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	e008      	b.n	8000984 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3301      	adds	r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1e8      	bne.n	8000952 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	781b      	ldrb	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	460a      	mov	r2, r1
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <ssd1306_SetCursor+0x2c>)
 80009a2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <ssd1306_SetCursor+0x2c>)
 80009aa:	805a      	strh	r2, [r3, #2]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	200004e0 	.word	0x200004e0

080009bc <ssd1306_TestFonts>:
    } while((end - start) < 8000);
   
    HAL_Delay(1000);
}

void ssd1306_TestFonts() {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff fe89 	bl	80006d8 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 80009c6:	2100      	movs	r1, #0
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff ffdf 	bl	800098c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <ssd1306_TestFonts+0x64>)
 80009d0:	2301      	movs	r3, #1
 80009d2:	ca06      	ldmia	r2, {r1, r2}
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <ssd1306_TestFonts+0x68>)
 80009d6:	f7ff ffb3 	bl	8000940 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 80009da:	211a      	movs	r1, #26
 80009dc:	2002      	movs	r0, #2
 80009de:	f7ff ffd5 	bl	800098c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <ssd1306_TestFonts+0x6c>)
 80009e4:	2301      	movs	r3, #1
 80009e6:	ca06      	ldmia	r2, {r1, r2}
 80009e8:	4810      	ldr	r0, [pc, #64]	; (8000a2c <ssd1306_TestFonts+0x70>)
 80009ea:	f7ff ffa9 	bl	8000940 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 80009ee:	212c      	movs	r1, #44	; 0x2c
 80009f0:	2002      	movs	r0, #2
 80009f2:	f7ff ffcb 	bl	800098c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <ssd1306_TestFonts+0x74>)
 80009f8:	2301      	movs	r3, #1
 80009fa:	ca06      	ldmia	r2, {r1, r2}
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <ssd1306_TestFonts+0x78>)
 80009fe:	f7ff ff9f 	bl	8000940 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 8000a02:	2136      	movs	r1, #54	; 0x36
 8000a04:	2002      	movs	r0, #2
 8000a06:	f7ff ffc1 	bl	800098c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <ssd1306_TestFonts+0x7c>)
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	ca06      	ldmia	r2, {r1, r2}
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <ssd1306_TestFonts+0x80>)
 8000a12:	f7ff ff95 	bl	8000940 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000a16:	f7ff fe83 	bl	8000720 <ssd1306_UpdateScreen>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000018 	.word	0x20000018
 8000a24:	08003ad0 	.word	0x08003ad0
 8000a28:	20000010 	.word	0x20000010
 8000a2c:	08003adc 	.word	0x08003adc
 8000a30:	20000008 	.word	0x20000008
 8000a34:	08003ae8 	.word	0x08003ae8
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	08003af4 	.word	0x08003af4

08000a40 <ssd1306_TestAll>:
    ssd1306_SetCursor(2, 18);
    ssd1306_WriteString(buff, Font_11x18, Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestAll() {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000a44:	f7ff fdda 	bl	80005fc <ssd1306_Init>
   // ssd1306_TestFPS();
   // HAL_Delay(3000);
   // ssd1306_TestBorder();
    ssd1306_TestFonts();
 8000a48:	f7ff ffb8 	bl	80009bc <ssd1306_TestFonts>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_MspInit+0x44>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6613      	str	r3, [r2, #96]	; 0x60
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x44>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0ac      	sub	sp, #176	; 0xb0
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2288      	movs	r2, #136	; 0x88
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 ffd7 	bl	8003a6c <memset>
  if(hi2c->Instance==I2C1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a25      	ldr	r2, [pc, #148]	; (8000b58 <HAL_I2C_MspInit+0xc0>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d142      	bne.n	8000b4e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ac8:	2340      	movs	r3, #64	; 0x40
 8000aca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 ff43 	bl	8002960 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ae0:	f7ff fd4e 	bl	8000580 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <HAL_I2C_MspInit+0xc4>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae8:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <HAL_I2C_MspInit+0xc4>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_I2C_MspInit+0xc4>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000afc:	23c0      	movs	r3, #192	; 0xc0
 8000afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b02:	2312      	movs	r3, #18
 8000b04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b14:	2304      	movs	r3, #4
 8000b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480f      	ldr	r0, [pc, #60]	; (8000b60 <HAL_I2C_MspInit+0xc8>)
 8000b22:	f000 fa9f 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_I2C_MspInit+0xc4>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <HAL_I2C_MspInit+0xc4>)
 8000b2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_I2C_MspInit+0xc4>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	201f      	movs	r0, #31
 8000b44:	f000 fa57 	bl	8000ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b48:	201f      	movs	r0, #31
 8000b4a:	f000 fa70 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	37b0      	adds	r7, #176	; 0xb0
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40005400 	.word	0x40005400
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	48000400 	.word	0x48000400

08000b64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0aa      	sub	sp, #168	; 0xa8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2288      	movs	r2, #136	; 0x88
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 ff71 	bl	8003a6c <memset>
  if(hrtc->Instance==RTC)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <HAL_RTC_MspInit+0xb0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d13a      	bne.n	8000c0a <HAL_RTC_MspInit+0xa6>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b98:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 feda 	bl	8002960 <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8000bb2:	f7ff fce5 	bl	8000580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_RTC_MspInit+0xb4>)
 8000bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bbc:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <HAL_RTC_MspInit+0xb4>)
 8000bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_RTC_MspInit+0xb4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <HAL_RTC_MspInit+0xb4>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_RTC_MspInit+0xb4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_RTC_MspInit+0xb8>)
 8000c06:	f000 fa2d 	bl	8001064 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	37a8      	adds	r7, #168	; 0xa8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40002800 	.word	0x40002800
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	48000400 	.word	0x48000400

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f8a4 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <I2C1_EV_IRQHandler+0x10>)
 8000c7a:	f000 fd41 	bl	8001700 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000048 	.word	0x20000048

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb0:	f7ff ffea 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cda:	f002 fea3 	bl	8003a24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cde:	f7ff fa79 	bl	80001d4 <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000cf0:	0800696c 	.word	0x0800696c
  ldr r2, =_sbss
 8000cf4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000cf8:	200004ec 	.word	0x200004ec

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_Init+0x3c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_Init+0x3c>)
 8000d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f000 f962 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 f80f 	bl	8000d40 <HAL_InitTick>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	e001      	b.n	8000d32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d2e:	f7ff fe8f 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40022000 	.word	0x40022000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_InitTick+0x6c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d023      	beq.n	8000d9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_InitTick+0x70>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_InitTick+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f96d 	bl	800104a <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10f      	bne.n	8000d96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d809      	bhi.n	8000d90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f937 	bl	8000ff6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_InitTick+0x74>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e007      	b.n	8000da0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e004      	b.n	8000da0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e001      	b.n	8000da0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000028 	.word	0x20000028
 8000db0:	20000020 	.word	0x20000020
 8000db4:	20000024 	.word	0x20000024

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000028 	.word	0x20000028
 8000ddc:	200004e8 	.word	0x200004e8

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200004e8 	.word	0x200004e8

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000028 	.word	0x20000028

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	; (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff29 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff3e 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff31 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffa2 	bl	8000f9c <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001072:	e17f      	b.n	8001374 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	2101      	movs	r1, #1
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8171 	beq.w	800136e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d005      	beq.n	80010a4 <HAL_GPIO_Init+0x40>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d130      	bne.n	8001106 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010da:	2201      	movs	r2, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	091b      	lsrs	r3, r3, #4
 80010f0:	f003 0201 	and.w	r2, r3, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b03      	cmp	r3, #3
 8001110:	d118      	bne.n	8001144 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b03      	cmp	r3, #3
 800114e:	d017      	beq.n	8001180 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d123      	bne.n	80011d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	6939      	ldr	r1, [r7, #16]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80ac 	beq.w	800136e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <HAL_GPIO_Init+0x330>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	4a5e      	ldr	r2, [pc, #376]	; (8001394 <HAL_GPIO_Init+0x330>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6613      	str	r3, [r2, #96]	; 0x60
 8001222:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <HAL_GPIO_Init+0x330>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800122e:	4a5a      	ldr	r2, [pc, #360]	; (8001398 <HAL_GPIO_Init+0x334>)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001258:	d025      	beq.n	80012a6 <HAL_GPIO_Init+0x242>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <HAL_GPIO_Init+0x338>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d01f      	beq.n	80012a2 <HAL_GPIO_Init+0x23e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4e      	ldr	r2, [pc, #312]	; (80013a0 <HAL_GPIO_Init+0x33c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d019      	beq.n	800129e <HAL_GPIO_Init+0x23a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4d      	ldr	r2, [pc, #308]	; (80013a4 <HAL_GPIO_Init+0x340>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0x236>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4c      	ldr	r2, [pc, #304]	; (80013a8 <HAL_GPIO_Init+0x344>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00d      	beq.n	8001296 <HAL_GPIO_Init+0x232>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4b      	ldr	r2, [pc, #300]	; (80013ac <HAL_GPIO_Init+0x348>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x22e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4a      	ldr	r2, [pc, #296]	; (80013b0 <HAL_GPIO_Init+0x34c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_GPIO_Init+0x22a>
 800128a:	2306      	movs	r3, #6
 800128c:	e00c      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 800128e:	2307      	movs	r3, #7
 8001290:	e00a      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 8001292:	2305      	movs	r3, #5
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 8001296:	2304      	movs	r3, #4
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 80012a6:	2300      	movs	r3, #0
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012b8:	4937      	ldr	r1, [pc, #220]	; (8001398 <HAL_GPIO_Init+0x334>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_GPIO_Init+0x350>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ea:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <HAL_GPIO_Init+0x350>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_GPIO_Init+0x350>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <HAL_GPIO_Init+0x350>)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_GPIO_Init+0x350>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <HAL_GPIO_Init+0x350>)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_GPIO_Init+0x350>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <HAL_GPIO_Init+0x350>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	f47f ae78 	bne.w	8001074 <HAL_GPIO_Init+0x10>
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	371c      	adds	r7, #28
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000
 800139c:	48000400 	.word	0x48000400
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000c00 	.word	0x48000c00
 80013a8:	48001000 	.word	0x48001000
 80013ac:	48001400 	.word	0x48001400
 80013b0:	48001800 	.word	0x48001800
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e081      	b.n	80014ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fb5a 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2224      	movs	r2, #36	; 0x24
 80013e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001408:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001418:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	e006      	b.n	8001440 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800143e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d104      	bne.n	8001452 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001450:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001464:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001474:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69d9      	ldr	r1, [r3, #28]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2220      	movs	r2, #32
 80014ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af02      	add	r7, sp, #8
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	817b      	strh	r3, [r7, #10]
 80014ea:	460b      	mov	r3, r1
 80014ec:	813b      	strh	r3, [r7, #8]
 80014ee:	4613      	mov	r3, r2
 80014f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b20      	cmp	r3, #32
 80014fc:	f040 80f9 	bne.w	80016f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <HAL_I2C_Mem_Write+0x34>
 8001506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001512:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0ed      	b.n	80016f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_I2C_Mem_Write+0x4e>
 8001522:	2302      	movs	r3, #2
 8001524:	e0e6      	b.n	80016f4 <HAL_I2C_Mem_Write+0x21c>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800152e:	f7ff fc57 	bl	8000de0 <HAL_GetTick>
 8001532:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2319      	movs	r3, #25
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f000 f96f 	bl	8001824 <I2C_WaitOnFlagUntilTimeout>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0d1      	b.n	80016f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2221      	movs	r2, #33	; 0x21
 8001554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2240      	movs	r2, #64	; 0x40
 800155c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a3a      	ldr	r2, [r7, #32]
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001570:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001578:	88f8      	ldrh	r0, [r7, #6]
 800157a:	893a      	ldrh	r2, [r7, #8]
 800157c:	8979      	ldrh	r1, [r7, #10]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	4603      	mov	r3, r0
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 f8d3 	bl	8001734 <I2C_RequestMemoryWrite>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0a9      	b.n	80016f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2bff      	cmp	r3, #255	; 0xff
 80015a8:	d90e      	bls.n	80015c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	22ff      	movs	r2, #255	; 0xff
 80015ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	8979      	ldrh	r1, [r7, #10]
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 fad7 	bl	8001b74 <I2C_TransferConfig>
 80015c6:	e00f      	b.n	80015e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	8979      	ldrh	r1, [r7, #10]
 80015da:	2300      	movs	r3, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 fac6 	bl	8001b74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f959 	bl	80018a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e07b      	b.n	80016f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001624:	3b01      	subs	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001630:	b29b      	uxth	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d034      	beq.n	80016a0 <HAL_I2C_Mem_Write+0x1c8>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163a:	2b00      	cmp	r3, #0
 800163c:	d130      	bne.n	80016a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	2200      	movs	r2, #0
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 f8eb 	bl	8001824 <I2C_WaitOnFlagUntilTimeout>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e04d      	b.n	80016f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165c:	b29b      	uxth	r3, r3
 800165e:	2bff      	cmp	r3, #255	; 0xff
 8001660:	d90e      	bls.n	8001680 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	22ff      	movs	r2, #255	; 0xff
 8001666:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166c:	b2da      	uxtb	r2, r3
 800166e:	8979      	ldrh	r1, [r7, #10]
 8001670:	2300      	movs	r3, #0
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 fa7b 	bl	8001b74 <I2C_TransferConfig>
 800167e:	e00f      	b.n	80016a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168e:	b2da      	uxtb	r2, r3
 8001690:	8979      	ldrh	r1, [r7, #10]
 8001692:	2300      	movs	r3, #0
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 fa6a 	bl	8001b74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d19e      	bne.n	80015e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f938 	bl	8001924 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e01a      	b.n	80016f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2220      	movs	r2, #32
 80016c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_I2C_Mem_Write+0x224>)
 80016d2:	400b      	ands	r3, r1
 80016d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2220      	movs	r2, #32
 80016da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80016f2:	2302      	movs	r3, #2
  }
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	fe00e800 	.word	0xfe00e800

08001700 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	68f9      	ldr	r1, [r7, #12]
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	4798      	blx	r3
  }
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af02      	add	r7, sp, #8
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	4608      	mov	r0, r1
 800173e:	4611      	mov	r1, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4603      	mov	r3, r0
 8001744:	817b      	strh	r3, [r7, #10]
 8001746:	460b      	mov	r3, r1
 8001748:	813b      	strh	r3, [r7, #8]
 800174a:	4613      	mov	r3, r2
 800174c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	8979      	ldrh	r1, [r7, #10]
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <I2C_RequestMemoryWrite+0xa4>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 fa09 	bl	8001b74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	69b9      	ldr	r1, [r7, #24]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f89c 	bl	80018a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e02c      	b.n	80017d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800177c:	893b      	ldrh	r3, [r7, #8]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
 8001786:	e015      	b.n	80017b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001788:	893b      	ldrh	r3, [r7, #8]
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	b29b      	uxth	r3, r3
 800178e:	b2da      	uxtb	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	69b9      	ldr	r1, [r7, #24]
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 f882 	bl	80018a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e012      	b.n	80017d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017aa:	893b      	ldrh	r3, [r7, #8]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2200      	movs	r2, #0
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 f830 	bl	8001824 <I2C_WaitOnFlagUntilTimeout>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	80002000 	.word	0x80002000

080017dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d103      	bne.n	80017fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2200      	movs	r2, #0
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b01      	cmp	r3, #1
 8001806:	d007      	beq.n	8001818 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	619a      	str	r2, [r3, #24]
  }
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001834:	e022      	b.n	800187c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d01e      	beq.n	800187c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800183e:	f7ff facf 	bl	8000de0 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d302      	bcc.n	8001854 <I2C_WaitOnFlagUntilTimeout+0x30>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d113      	bne.n	800187c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001858:	f043 0220 	orr.w	r2, r3, #32
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2220      	movs	r2, #32
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e00f      	b.n	800189c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	4013      	ands	r3, r2
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	429a      	cmp	r2, r3
 800188a:	bf0c      	ite	eq
 800188c:	2301      	moveq	r3, #1
 800188e:	2300      	movne	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	429a      	cmp	r2, r3
 8001898:	d0cd      	beq.n	8001836 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018b0:	e02c      	b.n	800190c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f870 	bl	800199c <I2C_IsErrorOccurred>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e02a      	b.n	800191c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d01e      	beq.n	800190c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ce:	f7ff fa87 	bl	8000de0 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d302      	bcc.n	80018e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d113      	bne.n	800190c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e8:	f043 0220 	orr.w	r2, r3, #32
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2220      	movs	r2, #32
 80018f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e007      	b.n	800191c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b02      	cmp	r3, #2
 8001918:	d1cb      	bne.n	80018b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001930:	e028      	b.n	8001984 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f830 	bl	800199c <I2C_IsErrorOccurred>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e026      	b.n	8001994 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001946:	f7ff fa4b 	bl	8000de0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	429a      	cmp	r2, r3
 8001954:	d302      	bcc.n	800195c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d113      	bne.n	8001984 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f043 0220 	orr.w	r2, r3, #32
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e007      	b.n	8001994 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	2b20      	cmp	r3, #32
 8001990:	d1cf      	bne.n	8001932 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d075      	beq.n	8001ab4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2210      	movs	r2, #16
 80019ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019d0:	e056      	b.n	8001a80 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d052      	beq.n	8001a80 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019da:	f7ff fa01 	bl	8000de0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d302      	bcc.n	80019f0 <I2C_IsErrorOccurred+0x54>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d147      	bne.n	8001a80 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a12:	d12e      	bne.n	8001a72 <I2C_IsErrorOccurred+0xd6>
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a1a:	d02a      	beq.n	8001a72 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001a1c:	7cfb      	ldrb	r3, [r7, #19]
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d027      	beq.n	8001a72 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a32:	f7ff f9d5 	bl	8000de0 <HAL_GetTick>
 8001a36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a38:	e01b      	b.n	8001a72 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a3a:	f7ff f9d1 	bl	8000de0 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b19      	cmp	r3, #25
 8001a46:	d914      	bls.n	8001a72 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	f043 0220 	orr.w	r2, r3, #32
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2220      	movs	r2, #32
 8001a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d1dc      	bne.n	8001a3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d003      	beq.n	8001a96 <I2C_IsErrorOccurred+0xfa>
 8001a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d09d      	beq.n	80019d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d103      	bne.n	8001aa6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	f043 0308 	orr.w	r3, r3, #8
 8001aee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01c      	beq.n	8001b64 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f7ff fe56 	bl	80017dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <I2C_IsErrorOccurred+0x1d4>)
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	fe00e800 	.word	0xfe00e800

08001b74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	817b      	strh	r3, [r7, #10]
 8001b82:	4613      	mov	r3, r2
 8001b84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b86:	897b      	ldrh	r3, [r7, #10]
 8001b88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b8c:	7a7b      	ldrb	r3, [r7, #9]
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ba2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	0d5b      	lsrs	r3, r3, #21
 8001bae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <I2C_TransferConfig+0x60>)
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	ea02 0103 	and.w	r1, r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	03ff63ff 	.word	0x03ff63ff

08001bd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d138      	bne.n	8001c60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e032      	b.n	8001c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2224      	movs	r2, #36	; 0x24
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e000      	b.n	8001c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c60:	2302      	movs	r3, #2
  }
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d139      	bne.n	8001cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e033      	b.n	8001cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2224      	movs	r2, #36	; 0x24
 8001c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0201 	bic.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e000      	b.n	8001cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cf8:	2302      	movs	r3, #2
  }
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40007000 	.word	0x40007000

08001d24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d32:	d130      	bne.n	8001d96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d40:	d038      	beq.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d4a:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2232      	movs	r2, #50	; 0x32
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0c9b      	lsrs	r3, r3, #18
 8001d64:	3301      	adds	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d68:	e002      	b.n	8001d70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7c:	d102      	bne.n	8001d84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f2      	bne.n	8001d6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d90:	d110      	bne.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e00f      	b.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da2:	d007      	beq.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dac:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	20000020 	.word	0x20000020
 8001dcc:	431bde83 	.word	0x431bde83

08001dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e3ca      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de2:	4b97      	ldr	r3, [pc, #604]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dec:	4b94      	ldr	r3, [pc, #592]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80e4 	beq.w	8001fcc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_RCC_OscConfig+0x4a>
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	f040 808b 	bne.w	8001f28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	f040 8087 	bne.w	8001f28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e1a:	4b89      	ldr	r3, [pc, #548]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x62>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e3a2      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1a      	ldr	r2, [r3, #32]
 8001e36:	4b82      	ldr	r3, [pc, #520]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_RCC_OscConfig+0x7c>
 8001e42:	4b7f      	ldr	r3, [pc, #508]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e4a:	e005      	b.n	8001e58 <HAL_RCC_OscConfig+0x88>
 8001e4c:	4b7c      	ldr	r3, [pc, #496]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d223      	bcs.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fd1d 	bl	80028a0 <RCC_SetFlashLatencyFromMSIRange>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e383      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e70:	4b73      	ldr	r3, [pc, #460]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a72      	ldr	r2, [pc, #456]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b70      	ldr	r3, [pc, #448]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	496d      	ldr	r1, [pc, #436]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e8e:	4b6c      	ldr	r3, [pc, #432]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	4968      	ldr	r1, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
 8001ea2:	e025      	b.n	8001ef0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea4:	4b66      	ldr	r3, [pc, #408]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a65      	ldr	r2, [pc, #404]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	f043 0308 	orr.w	r3, r3, #8
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b63      	ldr	r3, [pc, #396]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4960      	ldr	r1, [pc, #384]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec2:	4b5f      	ldr	r3, [pc, #380]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	495b      	ldr	r1, [pc, #364]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fcdd 	bl	80028a0 <RCC_SetFlashLatencyFromMSIRange>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e343      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ef0:	f000 fc4a 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b52      	ldr	r3, [pc, #328]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	4950      	ldr	r1, [pc, #320]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	4a4e      	ldr	r2, [pc, #312]	; (8002048 <HAL_RCC_OscConfig+0x278>)
 8001f0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f10:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_RCC_OscConfig+0x27c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe ff13 	bl	8000d40 <HAL_InitTick>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d052      	beq.n	8001fca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	e327      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d032      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f30:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a42      	ldr	r2, [pc, #264]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe ff50 	bl	8000de0 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f44:	f7fe ff4c 	bl	8000de0 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e310      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f56:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f62:	4b37      	ldr	r3, [pc, #220]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a36      	ldr	r2, [pc, #216]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b34      	ldr	r3, [pc, #208]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4931      	ldr	r1, [pc, #196]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f80:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	492c      	ldr	r1, [pc, #176]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
 8001f94:	e01a      	b.n	8001fcc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a29      	ldr	r2, [pc, #164]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe ff1d 	bl	8000de0 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001faa:	f7fe ff19 	bl	8000de0 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e2dd      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0x1da>
 8001fc8:	e000      	b.n	8001fcc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d074      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x21a>
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d10e      	bne.n	8002002 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d10b      	bne.n	8002002 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d064      	beq.n	80020c0 <HAL_RCC_OscConfig+0x2f0>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d160      	bne.n	80020c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e2ba      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x24a>
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	e026      	b.n	8002068 <HAL_RCC_OscConfig+0x298>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002022:	d115      	bne.n	8002050 <HAL_RCC_OscConfig+0x280>
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a05      	ldr	r2, [pc, #20]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 800202a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a02      	ldr	r2, [pc, #8]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e014      	b.n	8002068 <HAL_RCC_OscConfig+0x298>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	08006924 	.word	0x08006924
 8002048:	20000020 	.word	0x20000020
 800204c:	20000024 	.word	0x20000024
 8002050:	4ba0      	ldr	r3, [pc, #640]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a9f      	ldr	r2, [pc, #636]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b9d      	ldr	r3, [pc, #628]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a9c      	ldr	r2, [pc, #624]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe feb6 	bl	8000de0 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe feb2 	bl	8000de0 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e276      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208a:	4b92      	ldr	r3, [pc, #584]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x2a8>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe fea2 	bl	8000de0 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a0:	f7fe fe9e 	bl	8000de0 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e262      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b2:	4b88      	ldr	r3, [pc, #544]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2d0>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d060      	beq.n	8002190 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_OscConfig+0x310>
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d119      	bne.n	800210e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d116      	bne.n	800210e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e0:	4b7c      	ldr	r3, [pc, #496]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_OscConfig+0x328>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e23f      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f8:	4b76      	ldr	r3, [pc, #472]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	061b      	lsls	r3, r3, #24
 8002106:	4973      	ldr	r1, [pc, #460]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800210c:	e040      	b.n	8002190 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d023      	beq.n	800215e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002116:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7fe fe5d 	bl	8000de0 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212a:	f7fe fe59 	bl	8000de0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e21d      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800213c:	4b65      	ldr	r3, [pc, #404]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002148:	4b62      	ldr	r3, [pc, #392]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	061b      	lsls	r3, r3, #24
 8002156:	495f      	ldr	r1, [pc, #380]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
 800215c:	e018      	b.n	8002190 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215e:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a5c      	ldr	r2, [pc, #368]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7fe fe39 	bl	8000de0 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002172:	f7fe fe35 	bl	8000de0 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e1f9      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002184:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f0      	bne.n	8002172 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d03c      	beq.n	8002216 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d01c      	beq.n	80021de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a4:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80021a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021aa:	4a4a      	ldr	r2, [pc, #296]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7fe fe14 	bl	8000de0 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021bc:	f7fe fe10 	bl	8000de0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1d4      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ce:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80021d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ef      	beq.n	80021bc <HAL_RCC_OscConfig+0x3ec>
 80021dc:	e01b      	b.n	8002216 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021de:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80021e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e4:	4a3b      	ldr	r2, [pc, #236]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7fe fdf7 	bl	8000de0 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f6:	f7fe fdf3 	bl	8000de0 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e1b7      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002208:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 800220a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1ef      	bne.n	80021f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80a6 	beq.w	8002370 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10d      	bne.n	8002250 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223e:	6593      	str	r3, [r2, #88]	; 0x58
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224c:	2301      	movs	r3, #1
 800224e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <HAL_RCC_OscConfig+0x508>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d118      	bne.n	800228e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCC_OscConfig+0x508>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_RCC_OscConfig+0x508>)
 8002262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002266:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002268:	f7fe fdba 	bl	8000de0 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002270:	f7fe fdb6 	bl	8000de0 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e17a      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_RCC_OscConfig+0x508>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d108      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4d8>
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a6:	e029      	b.n	80022fc <HAL_RCC_OscConfig+0x52c>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d115      	bne.n	80022dc <HAL_RCC_OscConfig+0x50c>
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	4a03      	ldr	r2, [pc, #12]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d0:	e014      	b.n	80022fc <HAL_RCC_OscConfig+0x52c>
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40007000 	.word	0x40007000
 80022dc:	4b9c      	ldr	r3, [pc, #624]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	4a9b      	ldr	r2, [pc, #620]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ec:	4b98      	ldr	r3, [pc, #608]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	4a97      	ldr	r2, [pc, #604]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d016      	beq.n	8002332 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7fe fd6c 	bl	8000de0 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800230a:	e00a      	b.n	8002322 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230c:	f7fe fd68 	bl	8000de0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e12a      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002322:	4b8b      	ldr	r3, [pc, #556]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0ed      	beq.n	800230c <HAL_RCC_OscConfig+0x53c>
 8002330:	e015      	b.n	800235e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7fe fd55 	bl	8000de0 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe fd51 	bl	8000de0 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e113      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002350:	4b7f      	ldr	r3, [pc, #508]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1ed      	bne.n	800233a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235e:	7ffb      	ldrb	r3, [r7, #31]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d105      	bne.n	8002370 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002364:	4b7a      	ldr	r3, [pc, #488]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	4a79      	ldr	r2, [pc, #484]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 800236a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80fe 	beq.w	8002576 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	2b02      	cmp	r3, #2
 8002380:	f040 80d0 	bne.w	8002524 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002384:	4b72      	ldr	r3, [pc, #456]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	429a      	cmp	r2, r3
 8002396:	d130      	bne.n	80023fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	3b01      	subs	r3, #1
 80023a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d127      	bne.n	80023fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d11f      	bne.n	80023fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023c4:	2a07      	cmp	r2, #7
 80023c6:	bf14      	ite	ne
 80023c8:	2201      	movne	r2, #1
 80023ca:	2200      	moveq	r2, #0
 80023cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d113      	bne.n	80023fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	3b01      	subs	r3, #1
 80023e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d109      	bne.n	80023fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	085b      	lsrs	r3, r3, #1
 80023f2:	3b01      	subs	r3, #1
 80023f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d06e      	beq.n	80024d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d069      	beq.n	80024d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800240c:	4b50      	ldr	r3, [pc, #320]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0ad      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800241c:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002426:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002428:	f7fe fcda 	bl	8000de0 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe fcd6 	bl	8000de0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e09a      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002442:	4b43      	ldr	r3, [pc, #268]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244e:	4b40      	ldr	r3, [pc, #256]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	4b40      	ldr	r3, [pc, #256]	; (8002554 <HAL_RCC_OscConfig+0x784>)
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800245e:	3a01      	subs	r2, #1
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	4311      	orrs	r1, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002468:	0212      	lsls	r2, r2, #8
 800246a:	4311      	orrs	r1, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002470:	0852      	lsrs	r2, r2, #1
 8002472:	3a01      	subs	r2, #1
 8002474:	0552      	lsls	r2, r2, #21
 8002476:	4311      	orrs	r1, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800247c:	0852      	lsrs	r2, r2, #1
 800247e:	3a01      	subs	r2, #1
 8002480:	0652      	lsls	r2, r2, #25
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002488:	0912      	lsrs	r2, r2, #4
 800248a:	0452      	lsls	r2, r2, #17
 800248c:	430a      	orrs	r2, r1
 800248e:	4930      	ldr	r1, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002490:	4313      	orrs	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002494:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a2d      	ldr	r2, [pc, #180]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 800249a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80024a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024ac:	f7fe fc98 	bl	8000de0 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fc94 	bl	8000de0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e058      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024d2:	e050      	b.n	8002576 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e04f      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d148      	bne.n	8002576 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a19      	ldr	r2, [pc, #100]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80024ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 80024f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024fc:	f7fe fc70 	bl	8000de0 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe fc6c 	bl	8000de0 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e030      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x734>
 8002522:	e028      	b.n	8002576 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d023      	beq.n	8002572 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a08      	ldr	r2, [pc, #32]	; (8002550 <HAL_RCC_OscConfig+0x780>)
 8002530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fc53 	bl	8000de0 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253c:	e00c      	b.n	8002558 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fc4f 	bl	8000de0 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d905      	bls.n	8002558 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e013      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
 8002550:	40021000 	.word	0x40021000
 8002554:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_RCC_OscConfig+0x7b0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ec      	bne.n	800253e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_OscConfig+0x7b0>)
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	4905      	ldr	r1, [pc, #20]	; (8002580 <HAL_RCC_OscConfig+0x7b0>)
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCC_OscConfig+0x7b4>)
 800256c:	4013      	ands	r3, r2
 800256e:	60cb      	str	r3, [r1, #12]
 8002570:	e001      	b.n	8002576 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	feeefffc 	.word	0xfeeefffc

08002588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0e7      	b.n	800276c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b75      	ldr	r3, [pc, #468]	; (8002774 <HAL_RCC_ClockConfig+0x1ec>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d910      	bls.n	80025cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b72      	ldr	r3, [pc, #456]	; (8002774 <HAL_RCC_ClockConfig+0x1ec>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 0207 	bic.w	r2, r3, #7
 80025b2:	4970      	ldr	r1, [pc, #448]	; (8002774 <HAL_RCC_ClockConfig+0x1ec>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b6e      	ldr	r3, [pc, #440]	; (8002774 <HAL_RCC_ClockConfig+0x1ec>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0cf      	b.n	800276c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d010      	beq.n	80025fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b66      	ldr	r3, [pc, #408]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d908      	bls.n	80025fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b63      	ldr	r3, [pc, #396]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4960      	ldr	r1, [pc, #384]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d04c      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260e:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d121      	bne.n	800265e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0a6      	b.n	800276c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002626:	4b54      	ldr	r3, [pc, #336]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d115      	bne.n	800265e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e09a      	b.n	800276c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800263e:	4b4e      	ldr	r3, [pc, #312]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e08e      	b.n	800276c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800264e:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e086      	b.n	800276c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4943      	ldr	r1, [pc, #268]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 800266c:	4313      	orrs	r3, r2
 800266e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002670:	f7fe fbb6 	bl	8000de0 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7fe fbb2 	bl	8000de0 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e06e      	b.n	800276c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b31      	ldr	r3, [pc, #196]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d208      	bcs.n	80026ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026bc:	4b2e      	ldr	r3, [pc, #184]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	492b      	ldr	r1, [pc, #172]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ce:	4b29      	ldr	r3, [pc, #164]	; (8002774 <HAL_RCC_ClockConfig+0x1ec>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d210      	bcs.n	80026fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <HAL_RCC_ClockConfig+0x1ec>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 0207 	bic.w	r2, r3, #7
 80026e4:	4923      	ldr	r1, [pc, #140]	; (8002774 <HAL_RCC_ClockConfig+0x1ec>)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ec:	4b21      	ldr	r3, [pc, #132]	; (8002774 <HAL_RCC_ClockConfig+0x1ec>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e036      	b.n	800276c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	4918      	ldr	r1, [pc, #96]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d009      	beq.n	800273c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4910      	ldr	r1, [pc, #64]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 8002738:	4313      	orrs	r3, r2
 800273a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800273c:	f000 f824 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <HAL_RCC_ClockConfig+0x1f0>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	490b      	ldr	r1, [pc, #44]	; (800277c <HAL_RCC_ClockConfig+0x1f4>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
 8002758:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1f8>)
 800275a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1fc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe faed 	bl	8000d40 <HAL_InitTick>
 8002766:	4603      	mov	r3, r0
 8002768:	72fb      	strb	r3, [r7, #11]

  return status;
 800276a:	7afb      	ldrb	r3, [r7, #11]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40022000 	.word	0x40022000
 8002778:	40021000 	.word	0x40021000
 800277c:	08006924 	.word	0x08006924
 8002780:	20000020 	.word	0x20000020
 8002784:	20000024 	.word	0x20000024

08002788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002796:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <HAL_RCC_GetSysClockFreq+0x108>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a0:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x34>
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d121      	bne.n	80027fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d11e      	bne.n	80027fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027bc:	4b34      	ldr	r3, [pc, #208]	; (8002890 <HAL_RCC_GetSysClockFreq+0x108>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027c8:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ce:	0a1b      	lsrs	r3, r3, #8
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	e005      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027d8:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <HAL_RCC_GetSysClockFreq+0x108>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027e4:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10d      	bne.n	8002810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d102      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <HAL_RCC_GetSysClockFreq+0x110>)
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	e004      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d101      	bne.n	8002810 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800280c:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_RCC_GetSysClockFreq+0x114>)
 800280e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d134      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_RCC_GetSysClockFreq+0x108>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d003      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0xa6>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d003      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0xac>
 800282c:	e005      	b.n	800283a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_RCC_GetSysClockFreq+0x110>)
 8002830:	617b      	str	r3, [r7, #20]
      break;
 8002832:	e005      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_GetSysClockFreq+0x114>)
 8002836:	617b      	str	r3, [r7, #20]
      break;
 8002838:	e002      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	617b      	str	r3, [r7, #20]
      break;
 800283e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_RCC_GetSysClockFreq+0x108>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	3301      	adds	r3, #1
 800284c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_RCC_GetSysClockFreq+0x108>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	fb03 f202 	mul.w	r2, r3, r2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_RCC_GetSysClockFreq+0x108>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	0e5b      	lsrs	r3, r3, #25
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	3301      	adds	r3, #1
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002880:	69bb      	ldr	r3, [r7, #24]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	08006934 	.word	0x08006934
 8002898:	00f42400 	.word	0x00f42400
 800289c:	007a1200 	.word	0x007a1200

080028a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028ac:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028b8:	f7ff fa26 	bl	8001d08 <HAL_PWREx_GetVoltageRange>
 80028bc:	6178      	str	r0, [r7, #20]
 80028be:	e014      	b.n	80028ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	4a24      	ldr	r2, [pc, #144]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6593      	str	r3, [r2, #88]	; 0x58
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028d8:	f7ff fa16 	bl	8001d08 <HAL_PWREx_GetVoltageRange>
 80028dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f0:	d10b      	bne.n	800290a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b80      	cmp	r3, #128	; 0x80
 80028f6:	d919      	bls.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2ba0      	cmp	r3, #160	; 0xa0
 80028fc:	d902      	bls.n	8002904 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028fe:	2302      	movs	r3, #2
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	e013      	b.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002904:	2301      	movs	r3, #1
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	e010      	b.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b80      	cmp	r3, #128	; 0x80
 800290e:	d902      	bls.n	8002916 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002910:	2303      	movs	r3, #3
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	e00a      	b.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b80      	cmp	r3, #128	; 0x80
 800291a:	d102      	bne.n	8002922 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800291c:	2302      	movs	r3, #2
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	e004      	b.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b70      	cmp	r3, #112	; 0x70
 8002926:	d101      	bne.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002928:	2301      	movs	r3, #1
 800292a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 0207 	bic.w	r2, r3, #7
 8002934:	4909      	ldr	r1, [pc, #36]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800293c:	4b07      	ldr	r3, [pc, #28]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	429a      	cmp	r2, r3
 8002948:	d001      	beq.n	800294e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	40022000 	.word	0x40022000

08002960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002968:	2300      	movs	r3, #0
 800296a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800296c:	2300      	movs	r3, #0
 800296e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002978:	2b00      	cmp	r3, #0
 800297a:	d041      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002980:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002984:	d02a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002986:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800298a:	d824      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800298c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002990:	d008      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002996:	d81e      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800299c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a0:	d010      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029a2:	e018      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029a4:	4b86      	ldr	r3, [pc, #536]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a85      	ldr	r2, [pc, #532]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029b0:	e015      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fabb 	bl	8002f34 <RCCEx_PLLSAI1_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c2:	e00c      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3320      	adds	r3, #32
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fba6 	bl	800311c <RCCEx_PLLSAI2_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d4:	e003      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	74fb      	strb	r3, [r7, #19]
      break;
 80029da:	e000      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029e4:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f2:	4973      	ldr	r1, [pc, #460]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029fa:	e001      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d041      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a14:	d02a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a1a:	d824      	bhi.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a20:	d008      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a26:	d81e      	bhi.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a30:	d010      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a32:	e018      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a34:	4b62      	ldr	r3, [pc, #392]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a61      	ldr	r2, [pc, #388]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a40:	e015      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fa73 	bl	8002f34 <RCCEx_PLLSAI1_Config>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a52:	e00c      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3320      	adds	r3, #32
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fb5e 	bl	800311c <RCCEx_PLLSAI2_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a64:	e003      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	74fb      	strb	r3, [r7, #19]
      break;
 8002a6a:	e000      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a6e:	7cfb      	ldrb	r3, [r7, #19]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a74:	4b52      	ldr	r3, [pc, #328]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a82:	494f      	ldr	r1, [pc, #316]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a8a:	e001      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80a0 	beq.w	8002bde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab8:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	4a40      	ldr	r2, [pc, #256]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac4:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ae0:	f7fe f97e 	bl	8000de0 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ae6:	e009      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae8:	f7fe f97a 	bl	8000de0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d902      	bls.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	74fb      	strb	r3, [r7, #19]
        break;
 8002afa:	e005      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002afc:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ef      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d15c      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01f      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d019      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b2c:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b58:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6a:	f7fe f939 	bl	8000de0 <HAL_GetTick>
 8002b6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b70:	e00b      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7fe f935 	bl	8000de0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d902      	bls.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	74fb      	strb	r3, [r7, #19]
            break;
 8002b88:	e006      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ec      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bae:	4904      	ldr	r1, [pc, #16]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bb6:	e009      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
 8002bbc:	e006      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bcc:	7c7b      	ldrb	r3, [r7, #17]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	4b9e      	ldr	r3, [pc, #632]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	4a9d      	ldr	r2, [pc, #628]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bea:	4b98      	ldr	r3, [pc, #608]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf0:	f023 0203 	bic.w	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	4994      	ldr	r1, [pc, #592]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c0c:	4b8f      	ldr	r3, [pc, #572]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f023 020c 	bic.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	498c      	ldr	r1, [pc, #560]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c2e:	4b87      	ldr	r3, [pc, #540]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4983      	ldr	r1, [pc, #524]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c50:	4b7e      	ldr	r3, [pc, #504]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	497b      	ldr	r1, [pc, #492]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c72:	4b76      	ldr	r3, [pc, #472]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	4972      	ldr	r1, [pc, #456]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c94:	4b6d      	ldr	r3, [pc, #436]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	496a      	ldr	r1, [pc, #424]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb6:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	4961      	ldr	r1, [pc, #388]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cd8:	4b5c      	ldr	r3, [pc, #368]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	4959      	ldr	r1, [pc, #356]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cfa:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d08:	4950      	ldr	r1, [pc, #320]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d1c:	4b4b      	ldr	r3, [pc, #300]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	4948      	ldr	r1, [pc, #288]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d3e:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4c:	493f      	ldr	r1, [pc, #252]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d028      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d60:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6e:	4937      	ldr	r1, [pc, #220]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d80:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4a31      	ldr	r2, [pc, #196]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d8a:	60d3      	str	r3, [r2, #12]
 8002d8c:	e011      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f8c8 	bl	8002f34 <RCCEx_PLLSAI1_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
 8002db0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d028      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dbe:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	491f      	ldr	r1, [pc, #124]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ddc:	d106      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dde:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de8:	60d3      	str	r3, [r2, #12]
 8002dea:	e011      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f899 	bl	8002f34 <RCCEx_PLLSAI1_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e06:	7cfb      	ldrb	r3, [r7, #19]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d02b      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	4908      	ldr	r1, [pc, #32]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e3a:	d109      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a02      	ldr	r2, [pc, #8]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e46:	60d3      	str	r3, [r2, #12]
 8002e48:	e014      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f867 	bl	8002f34 <RCCEx_PLLSAI1_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e6a:	7cfb      	ldrb	r3, [r7, #19]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d02f      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8e:	4928      	ldr	r1, [pc, #160]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e9e:	d10d      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f844 	bl	8002f34 <RCCEx_PLLSAI1_Config>
 8002eac:	4603      	mov	r3, r0
 8002eae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d014      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002eb6:	7cfb      	ldrb	r3, [r7, #19]
 8002eb8:	74bb      	strb	r3, [r7, #18]
 8002eba:	e011      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3320      	adds	r3, #32
 8002eca:	2102      	movs	r1, #2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f925 	bl	800311c <RCCEx_PLLSAI2_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eec:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002efa:	490d      	ldr	r1, [pc, #52]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1e:	4904      	ldr	r1, [pc, #16]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f26:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000

08002f34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f42:	4b75      	ldr	r3, [pc, #468]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d018      	beq.n	8002f80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f4e:	4b72      	ldr	r3, [pc, #456]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0203 	and.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d10d      	bne.n	8002f7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
       ||
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d009      	beq.n	8002f7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f66:	4b6c      	ldr	r3, [pc, #432]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	091b      	lsrs	r3, r3, #4
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
       ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d047      	beq.n	800300a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	e044      	b.n	800300a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d018      	beq.n	8002fba <RCCEx_PLLSAI1_Config+0x86>
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d825      	bhi.n	8002fd8 <RCCEx_PLLSAI1_Config+0xa4>
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d002      	beq.n	8002f96 <RCCEx_PLLSAI1_Config+0x62>
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d009      	beq.n	8002fa8 <RCCEx_PLLSAI1_Config+0x74>
 8002f94:	e020      	b.n	8002fd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f96:	4b60      	ldr	r3, [pc, #384]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d11d      	bne.n	8002fde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa6:	e01a      	b.n	8002fde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fa8:	4b5b      	ldr	r3, [pc, #364]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d116      	bne.n	8002fe2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb8:	e013      	b.n	8002fe2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fba:	4b57      	ldr	r3, [pc, #348]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10f      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fc6:	4b54      	ldr	r3, [pc, #336]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fd6:	e006      	b.n	8002fe6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      break;
 8002fdc:	e004      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e002      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e000      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fe6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10d      	bne.n	800300a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fee:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	430b      	orrs	r3, r1
 8003004:	4944      	ldr	r1, [pc, #272]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d17d      	bne.n	800310c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003010:	4b41      	ldr	r3, [pc, #260]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a40      	ldr	r2, [pc, #256]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003016:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800301a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301c:	f7fd fee0 	bl	8000de0 <HAL_GetTick>
 8003020:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003022:	e009      	b.n	8003038 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003024:	f7fd fedc 	bl	8000de0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d902      	bls.n	8003038 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	73fb      	strb	r3, [r7, #15]
        break;
 8003036:	e005      	b.n	8003044 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003038:	4b37      	ldr	r3, [pc, #220]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ef      	bne.n	8003024 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d160      	bne.n	800310c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003050:	4b31      	ldr	r3, [pc, #196]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6892      	ldr	r2, [r2, #8]
 8003060:	0211      	lsls	r1, r2, #8
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68d2      	ldr	r2, [r2, #12]
 8003066:	0912      	lsrs	r2, r2, #4
 8003068:	0452      	lsls	r2, r2, #17
 800306a:	430a      	orrs	r2, r1
 800306c:	492a      	ldr	r1, [pc, #168]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	610b      	str	r3, [r1, #16]
 8003072:	e027      	b.n	80030c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d112      	bne.n	80030a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800307a:	4b27      	ldr	r3, [pc, #156]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003082:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6892      	ldr	r2, [r2, #8]
 800308a:	0211      	lsls	r1, r2, #8
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6912      	ldr	r2, [r2, #16]
 8003090:	0852      	lsrs	r2, r2, #1
 8003092:	3a01      	subs	r2, #1
 8003094:	0552      	lsls	r2, r2, #21
 8003096:	430a      	orrs	r2, r1
 8003098:	491f      	ldr	r1, [pc, #124]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800309a:	4313      	orrs	r3, r2
 800309c:	610b      	str	r3, [r1, #16]
 800309e:	e011      	b.n	80030c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6892      	ldr	r2, [r2, #8]
 80030b0:	0211      	lsls	r1, r2, #8
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6952      	ldr	r2, [r2, #20]
 80030b6:	0852      	lsrs	r2, r2, #1
 80030b8:	3a01      	subs	r2, #1
 80030ba:	0652      	lsls	r2, r2, #25
 80030bc:	430a      	orrs	r2, r1
 80030be:	4916      	ldr	r1, [pc, #88]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a13      	ldr	r2, [pc, #76]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fd fe86 	bl	8000de0 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030d6:	e009      	b.n	80030ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030d8:	f7fd fe82 	bl	8000de0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d902      	bls.n	80030ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	73fb      	strb	r3, [r7, #15]
          break;
 80030ea:	e005      	b.n	80030f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ef      	beq.n	80030d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	4904      	ldr	r1, [pc, #16]	; (8003118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000

0800311c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800312a:	4b6a      	ldr	r3, [pc, #424]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d018      	beq.n	8003168 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003136:	4b67      	ldr	r3, [pc, #412]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0203 	and.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d10d      	bne.n	8003162 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
       ||
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800314e:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
       ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d047      	beq.n	80031f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	e044      	b.n	80031f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d018      	beq.n	80031a2 <RCCEx_PLLSAI2_Config+0x86>
 8003170:	2b03      	cmp	r3, #3
 8003172:	d825      	bhi.n	80031c0 <RCCEx_PLLSAI2_Config+0xa4>
 8003174:	2b01      	cmp	r3, #1
 8003176:	d002      	beq.n	800317e <RCCEx_PLLSAI2_Config+0x62>
 8003178:	2b02      	cmp	r3, #2
 800317a:	d009      	beq.n	8003190 <RCCEx_PLLSAI2_Config+0x74>
 800317c:	e020      	b.n	80031c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800317e:	4b55      	ldr	r3, [pc, #340]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11d      	bne.n	80031c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318e:	e01a      	b.n	80031c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003190:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d116      	bne.n	80031ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a0:	e013      	b.n	80031ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031a2:	4b4c      	ldr	r3, [pc, #304]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ae:	4b49      	ldr	r3, [pc, #292]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031be:	e006      	b.n	80031ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      break;
 80031c4:	e004      	b.n	80031d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031c6:	bf00      	nop
 80031c8:	e002      	b.n	80031d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10d      	bne.n	80031f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031d6:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	430b      	orrs	r3, r1
 80031ec:	4939      	ldr	r1, [pc, #228]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d167      	bne.n	80032c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031f8:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a35      	ldr	r2, [pc, #212]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003204:	f7fd fdec 	bl	8000de0 <HAL_GetTick>
 8003208:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800320a:	e009      	b.n	8003220 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800320c:	f7fd fde8 	bl	8000de0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d902      	bls.n	8003220 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	73fb      	strb	r3, [r7, #15]
        break;
 800321e:	e005      	b.n	800322c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003220:	4b2c      	ldr	r3, [pc, #176]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ef      	bne.n	800320c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d14a      	bne.n	80032c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d111      	bne.n	800325c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6892      	ldr	r2, [r2, #8]
 8003248:	0211      	lsls	r1, r2, #8
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68d2      	ldr	r2, [r2, #12]
 800324e:	0912      	lsrs	r2, r2, #4
 8003250:	0452      	lsls	r2, r2, #17
 8003252:	430a      	orrs	r2, r1
 8003254:	491f      	ldr	r1, [pc, #124]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003256:	4313      	orrs	r3, r2
 8003258:	614b      	str	r3, [r1, #20]
 800325a:	e011      	b.n	8003280 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003264:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6892      	ldr	r2, [r2, #8]
 800326c:	0211      	lsls	r1, r2, #8
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6912      	ldr	r2, [r2, #16]
 8003272:	0852      	lsrs	r2, r2, #1
 8003274:	3a01      	subs	r2, #1
 8003276:	0652      	lsls	r2, r2, #25
 8003278:	430a      	orrs	r2, r1
 800327a:	4916      	ldr	r1, [pc, #88]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327c:	4313      	orrs	r3, r2
 800327e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003280:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a13      	ldr	r2, [pc, #76]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7fd fda8 	bl	8000de0 <HAL_GetTick>
 8003290:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003292:	e009      	b.n	80032a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003294:	f7fd fda4 	bl	8000de0 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d902      	bls.n	80032a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	73fb      	strb	r3, [r7, #15]
          break;
 80032a6:	e005      	b.n	80032b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ef      	beq.n	8003294 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4904      	ldr	r1, [pc, #16]	; (80032d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000

080032d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d06c      	beq.n	80033c4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fd fc30 	bl	8000b64 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	22ca      	movs	r2, #202	; 0xca
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2253      	movs	r2, #83	; 0x53
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fa49 	bl	80037b4 <RTC_EnterInitMode>
 8003322:	4603      	mov	r3, r0
 8003324:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d14b      	bne.n	80033c4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800333a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800333e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6899      	ldr	r1, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68d2      	ldr	r2, [r2, #12]
 8003366:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6919      	ldr	r1, [r3, #16]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	041a      	lsls	r2, r3, #16
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fa4d 	bl	800381c <RTC_ExitInitMode>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d11b      	bne.n	80033c4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0203 	bic.w	r2, r2, #3
 800339a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	22ff      	movs	r2, #255	; 0xff
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033ce:	b590      	push	{r4, r7, lr}
 80033d0:	b087      	sub	sp, #28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_RTC_SetTime+0x1a>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e08b      	b.n	8003500 <HAL_RTC_SetTime+0x132>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	22ca      	movs	r2, #202	; 0xca
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2253      	movs	r2, #83	; 0x53
 8003406:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f9d3 	bl	80037b4 <RTC_EnterInitMode>
 800340e:	4603      	mov	r3, r0
 8003410:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d163      	bne.n	80034e0 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d126      	bne.n	800346c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2200      	movs	r2, #0
 8003430:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fa2e 	bl	8003898 <RTC_ByteToBcd2>
 800343c:	4603      	mov	r3, r0
 800343e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	785b      	ldrb	r3, [r3, #1]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fa27 	bl	8003898 <RTC_ByteToBcd2>
 800344a:	4603      	mov	r3, r0
 800344c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800344e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	789b      	ldrb	r3, [r3, #2]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fa1f 	bl	8003898 <RTC_ByteToBcd2>
 800345a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800345c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	78db      	ldrb	r3, [r3, #3]
 8003464:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	e018      	b.n	800349e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2200      	movs	r2, #0
 800347e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	785b      	ldrb	r3, [r3, #1]
 800348a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800348c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003492:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	78db      	ldrb	r3, [r3, #3]
 8003498:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80034a8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80034ac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6899      	ldr	r1, [r3, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f9a0 	bl	800381c <RTC_ExitInitMode>
 80034dc:	4603      	mov	r3, r0
 80034de:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	22ff      	movs	r2, #255	; 0xff
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8003500:	4618      	mov	r0, r3
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd90      	pop	{r4, r7, pc}

08003508 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003536:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800353a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	0c1b      	lsrs	r3, r3, #16
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003546:	b2da      	uxtb	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	0d9b      	lsrs	r3, r3, #22
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d11a      	bne.n	80035b6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f9a7 	bl	80038d8 <RTC_Bcd2ToByte>
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	785b      	ldrb	r3, [r3, #1]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f99e 	bl	80038d8 <RTC_Bcd2ToByte>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	789b      	ldrb	r3, [r3, #2]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f995 	bl	80038d8 <RTC_Bcd2ToByte>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_RTC_SetDate+0x1a>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e075      	b.n	80036c6 <HAL_RTC_SetDate+0x106>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10e      	bne.n	800360e <HAL_RTC_SetDate+0x4e>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	785b      	ldrb	r3, [r3, #1]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	f023 0310 	bic.w	r3, r3, #16
 8003604:	b2db      	uxtb	r3, r3
 8003606:	330a      	adds	r3, #10
 8003608:	b2da      	uxtb	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11c      	bne.n	800364e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	78db      	ldrb	r3, [r3, #3]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f93d 	bl	8003898 <RTC_ByteToBcd2>
 800361e:	4603      	mov	r3, r0
 8003620:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	785b      	ldrb	r3, [r3, #1]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f936 	bl	8003898 <RTC_ByteToBcd2>
 800362c:	4603      	mov	r3, r0
 800362e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003630:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	789b      	ldrb	r3, [r3, #2]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f92e 	bl	8003898 <RTC_ByteToBcd2>
 800363c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800363e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e00e      	b.n	800366c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	78db      	ldrb	r3, [r3, #3]
 8003652:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800365a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003660:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	22ca      	movs	r2, #202	; 0xca
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2253      	movs	r2, #83	; 0x53
 800367a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f899 	bl	80037b4 <RTC_EnterInitMode>
 8003682:	4603      	mov	r3, r0
 8003684:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10c      	bne.n	80036a6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003696:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800369a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f8bd 	bl	800381c <RTC_ExitInitMode>
 80036a2:	4603      	mov	r3, r0
 80036a4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	22ff      	movs	r2, #255	; 0xff
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d103      	bne.n	80036bc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd90      	pop	{r4, r7, pc}

080036ce <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b086      	sub	sp, #24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036e8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	0b5b      	lsrs	r3, r3, #13
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d11a      	bne.n	800375e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	78db      	ldrb	r3, [r3, #3]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f8d3 	bl	80038d8 <RTC_Bcd2ToByte>
 8003732:	4603      	mov	r3, r0
 8003734:	461a      	mov	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	785b      	ldrb	r3, [r3, #1]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f8ca 	bl	80038d8 <RTC_Bcd2ToByte>
 8003744:	4603      	mov	r3, r0
 8003746:	461a      	mov	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	789b      	ldrb	r3, [r3, #2]
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f8c1 	bl	80038d8 <RTC_Bcd2ToByte>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800377e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003780:	f7fd fb2e 	bl	8000de0 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003786:	e009      	b.n	800379c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003788:	f7fd fb2a 	bl	8000de0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003796:	d901      	bls.n	800379c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e007      	b.n	80037ac <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ee      	beq.n	8003788 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d120      	bne.n	8003810 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f04f 32ff 	mov.w	r2, #4294967295
 80037d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80037d8:	f7fd fb02 	bl	8000de0 <HAL_GetTick>
 80037dc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80037de:	e00d      	b.n	80037fc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80037e0:	f7fd fafe 	bl	8000de0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ee:	d905      	bls.n	80037fc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2203      	movs	r2, #3
 80037f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <RTC_EnterInitMode+0x5c>
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d1e7      	bne.n	80037e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <RTC_ExitInitMode+0x78>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <RTC_ExitInitMode+0x78>)
 800382e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003832:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <RTC_ExitInitMode+0x78>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10c      	bne.n	800385a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff91 	bl	8003768 <HAL_RTC_WaitForSynchro>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01e      	beq.n	800388a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2203      	movs	r2, #3
 8003850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e017      	b.n	800388a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800385a:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <RTC_ExitInitMode+0x78>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <RTC_ExitInitMode+0x78>)
 8003860:	f023 0320 	bic.w	r3, r3, #32
 8003864:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ff7e 	bl	8003768 <HAL_RTC_WaitForSynchro>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2203      	movs	r2, #3
 8003876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <RTC_ExitInitMode+0x78>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4a04      	ldr	r2, [pc, #16]	; (8003894 <RTC_ExitInitMode+0x78>)
 8003884:	f043 0320 	orr.w	r3, r3, #32
 8003888:	6093      	str	r3, [r2, #8]
  }

  return status;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40002800 	.word	0x40002800

08003898 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80038aa:	e005      	b.n	80038b8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80038b2:	7afb      	ldrb	r3, [r7, #11]
 80038b4:	3b0a      	subs	r3, #10
 80038b6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80038b8:	7afb      	ldrb	r3, [r7, #11]
 80038ba:	2b09      	cmp	r3, #9
 80038bc:	d8f6      	bhi.n	80038ac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	7afb      	ldrb	r3, [r7, #11]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	b2db      	uxtb	r3, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	0092      	lsls	r2, r2, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	4413      	add	r3, r2
 80038fe:	b2db      	uxtb	r3, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_RTCEx_SetTimeStamp>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_RTCEx_SetTimeStamp+0x1a>
 8003922:	2302      	movs	r3, #2
 8003924:	e034      	b.n	8003990 <HAL_RTCEx_SetTimeStamp+0x84>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003940:	f023 0308 	bic.w	r3, r3, #8
 8003944:	617b      	str	r3, [r7, #20]

  tmpreg |= TimeStampEdge;
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	22ca      	movs	r2, #202	; 0xca
 8003954:	625a      	str	r2, [r3, #36]	; 0x24
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2253      	movs	r2, #83	; 0x53
 800395c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003974:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	22ff      	movs	r2, #255	; 0xff
 800397c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_RTCEx_SetRefClock+0x16>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e034      	b.n	8003a1c <HAL_RTCEx_SetRefClock+0x80>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	22ca      	movs	r2, #202	; 0xca
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2253      	movs	r2, #83	; 0x53
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff feee 	bl	80037b4 <RTC_EnterInitMode>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10c      	bne.n	80039fc <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0210 	orr.w	r2, r2, #16
 80039f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff ff12 	bl	800381c <RTC_ExitInitMode>
 80039f8:	4603      	mov	r3, r0
 80039fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	22ff      	movs	r2, #255	; 0xff
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <__libc_init_array>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4d0d      	ldr	r5, [pc, #52]	; (8003a5c <__libc_init_array+0x38>)
 8003a28:	4c0d      	ldr	r4, [pc, #52]	; (8003a60 <__libc_init_array+0x3c>)
 8003a2a:	1b64      	subs	r4, r4, r5
 8003a2c:	10a4      	asrs	r4, r4, #2
 8003a2e:	2600      	movs	r6, #0
 8003a30:	42a6      	cmp	r6, r4
 8003a32:	d109      	bne.n	8003a48 <__libc_init_array+0x24>
 8003a34:	4d0b      	ldr	r5, [pc, #44]	; (8003a64 <__libc_init_array+0x40>)
 8003a36:	4c0c      	ldr	r4, [pc, #48]	; (8003a68 <__libc_init_array+0x44>)
 8003a38:	f000 f820 	bl	8003a7c <_init>
 8003a3c:	1b64      	subs	r4, r4, r5
 8003a3e:	10a4      	asrs	r4, r4, #2
 8003a40:	2600      	movs	r6, #0
 8003a42:	42a6      	cmp	r6, r4
 8003a44:	d105      	bne.n	8003a52 <__libc_init_array+0x2e>
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4c:	4798      	blx	r3
 8003a4e:	3601      	adds	r6, #1
 8003a50:	e7ee      	b.n	8003a30 <__libc_init_array+0xc>
 8003a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a56:	4798      	blx	r3
 8003a58:	3601      	adds	r6, #1
 8003a5a:	e7f2      	b.n	8003a42 <__libc_init_array+0x1e>
 8003a5c:	08006964 	.word	0x08006964
 8003a60:	08006964 	.word	0x08006964
 8003a64:	08006964 	.word	0x08006964
 8003a68:	08006968 	.word	0x08006968

08003a6c <memset>:
 8003a6c:	4402      	add	r2, r0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d100      	bne.n	8003a76 <memset+0xa>
 8003a74:	4770      	bx	lr
 8003a76:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7a:	e7f9      	b.n	8003a70 <memset+0x4>

08003a7c <_init>:
 8003a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7e:	bf00      	nop
 8003a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a82:	bc08      	pop	{r3}
 8003a84:	469e      	mov	lr, r3
 8003a86:	4770      	bx	lr

08003a88 <_fini>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	bf00      	nop
 8003a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8e:	bc08      	pop	{r3}
 8003a90:	469e      	mov	lr, r3
 8003a92:	4770      	bx	lr
