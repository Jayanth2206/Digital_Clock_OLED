
OLED_DIGI_CLOCK -Bitmap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e10  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005480  08005480  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005480  08005480  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005480  08005480  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005480  08005480  00015480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005484  08005484  00015484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000078  08005500  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  08005500  00020594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df1f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d3  00000000  00000000  0002dfc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  000302a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ad2  00000000  00000000  00031b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4a6  00000000  00000000  0005864a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb87d  00000000  00000000  00067af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015336d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003850  00000000  00000000  001533c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004658 	.word	0x08004658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004658 	.word	0x08004658

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fe2a 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f8a4 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f9a6 	bl	80005cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000280:	f000 f8f4 	bl	800046c <MX_I2C1_Init>
  MX_RTC_Init();
 8000284:	f000 f932 	bl	80004ec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  SSD1306_Init();  // initialise
 8000288:	f000 f9ca 	bl	8000620 <SSD1306_Init>

    /// lets print some string

      SSD1306_GotoXY (0,0);
 800028c:	2100      	movs	r1, #0
 800028e:	2000      	movs	r0, #0
 8000290:	f000 fb30 	bl	80008f4 <SSD1306_GotoXY>
      SSD1306_Puts ("HELLO", &Font_11x18, 1);
 8000294:	2201      	movs	r2, #1
 8000296:	4910      	ldr	r1, [pc, #64]	; (80002d8 <main+0x68>)
 8000298:	4810      	ldr	r0, [pc, #64]	; (80002dc <main+0x6c>)
 800029a:	f000 fbc1 	bl	8000a20 <SSD1306_Puts>
      SSD1306_GotoXY (10, 30);
 800029e:	211e      	movs	r1, #30
 80002a0:	200a      	movs	r0, #10
 80002a2:	f000 fb27 	bl	80008f4 <SSD1306_GotoXY>
      SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 80002a6:	2201      	movs	r2, #1
 80002a8:	490b      	ldr	r1, [pc, #44]	; (80002d8 <main+0x68>)
 80002aa:	480d      	ldr	r0, [pc, #52]	; (80002e0 <main+0x70>)
 80002ac:	f000 fbb8 	bl	8000a20 <SSD1306_Puts>
      SSD1306_UpdateScreen(); //display
 80002b0:	f000 fa7a 	bl	80007a8 <SSD1306_UpdateScreen>

      HAL_Delay (2000);
 80002b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002b8:	f000 fe84 	bl	8000fc4 <HAL_Delay>
//      SSD1306_InvertDisplay(1);   // invert the display
//
//      HAL_Delay(1000);
//
//      SSD1306_InvertDisplay(0);  // normalize the display
      SSD1306_Clear();
 80002bc:	f000 fbd5 	bl	8000a6a <SSD1306_Clear>
      HAL_Delay(1000);
 80002c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c4:	f000 fe7e 	bl	8000fc4 <HAL_Delay>
//
// 			  SSD1306_Clear();
// 			  SSD1306_DrawBitmap(0,0,horse10,128,64,1);
// 			  SSD1306_UpdateScreen();

 			 display_time();
 80002c8:	f000 f84c 	bl	8000364 <display_time>
 			 HAL_Delay(1000);
 80002cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d0:	f000 fe78 	bl	8000fc4 <HAL_Delay>
 			 display_time();
 80002d4:	e7f8      	b.n	80002c8 <main+0x58>
 80002d6:	bf00      	nop
 80002d8:	20000000 	.word	0x20000000
 80002dc:	08004670 	.word	0x08004670
 80002e0:	08004678 	.word	0x08004678

080002e4 <RTC_CalendarUpdate>:
  * @param  showtime : pointer to buffer
  * @param  showdate : pointer to buffer
  * @retval None
  */
static void RTC_CalendarUpdate(uint8_t *showtime, uint8_t *showdate)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08a      	sub	sp, #40	; 0x28
 80002e8:	af02      	add	r7, sp, #8
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]

  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  if (HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN) != HAL_OK)
 80002ee:	f107 0308 	add.w	r3, r7, #8
 80002f2:	2200      	movs	r2, #0
 80002f4:	4619      	mov	r1, r3
 80002f6:	4818      	ldr	r0, [pc, #96]	; (8000358 <RTC_CalendarUpdate+0x74>)
 80002f8:	f003 fa80 	bl	80037fc <HAL_RTC_GetTime>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <RTC_CalendarUpdate+0x22>
  {
    /* HAL Error */
    Error_Handler();
 8000302:	f000 f987 	bl	8000614 <Error_Handler>
  }

  /* Get the RTC current Date */
  if (HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN) != HAL_OK)
 8000306:	f107 031c 	add.w	r3, r7, #28
 800030a:	2200      	movs	r2, #0
 800030c:	4619      	mov	r1, r3
 800030e:	4812      	ldr	r0, [pc, #72]	; (8000358 <RTC_CalendarUpdate+0x74>)
 8000310:	f003 fb57 	bl	80039c2 <HAL_RTC_GetDate>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <RTC_CalendarUpdate+0x3a>
  {
    /* HAL Error */
    Error_Handler();
 800031a:	f000 f97b 	bl	8000614 <Error_Handler>
  }

  /* Display time Format : hh:mm:ss */
  sprintf((char *)showtime, "%02d:%02d:%02d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 800031e:	7a3b      	ldrb	r3, [r7, #8]
 8000320:	461a      	mov	r2, r3
 8000322:	7a7b      	ldrb	r3, [r7, #9]
 8000324:	4619      	mov	r1, r3
 8000326:	7abb      	ldrb	r3, [r7, #10]
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	460b      	mov	r3, r1
 800032c:	490b      	ldr	r1, [pc, #44]	; (800035c <RTC_CalendarUpdate+0x78>)
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f003 fd24 	bl	8003d7c <siprintf>
  /* Display date Format : mm-dd-yy */
  sprintf((char *)showdate, "%02d-%02d-%02d", sdatestructureget.Date, sdatestructureget.Month, 2000 + sdatestructureget.Year);
 8000334:	7fbb      	ldrb	r3, [r7, #30]
 8000336:	461a      	mov	r2, r3
 8000338:	7f7b      	ldrb	r3, [r7, #29]
 800033a:	4619      	mov	r1, r3
 800033c:	7ffb      	ldrb	r3, [r7, #31]
 800033e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	460b      	mov	r3, r1
 8000346:	4906      	ldr	r1, [pc, #24]	; (8000360 <RTC_CalendarUpdate+0x7c>)
 8000348:	6838      	ldr	r0, [r7, #0]
 800034a:	f003 fd17 	bl	8003d7c <siprintf>
}
 800034e:	bf00      	nop
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000150 	.word	0x20000150
 800035c:	08004684 	.word	0x08004684
 8000360:	08004694 	.word	0x08004694

08000364 <display_time>:



void display_time (void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	 RTC_CalendarUpdate(aShowTime, aShowDate);
 8000368:	4912      	ldr	r1, [pc, #72]	; (80003b4 <display_time+0x50>)
 800036a:	4813      	ldr	r0, [pc, #76]	; (80003b8 <display_time+0x54>)
 800036c:	f7ff ffba 	bl	80002e4 <RTC_CalendarUpdate>
	 SSD1306_Fill(0);
 8000370:	2000      	movs	r0, #0
 8000372:	f000 fa47 	bl	8000804 <SSD1306_Fill>
	 SSD1306_GotoXY(2, 2);
 8000376:	2102      	movs	r1, #2
 8000378:	2002      	movs	r0, #2
 800037a:	f000 fabb 	bl	80008f4 <SSD1306_GotoXY>
	  SSD1306_Puts("DIGI-CLOCK", &Font_11x18, 1);
 800037e:	2201      	movs	r2, #1
 8000380:	490e      	ldr	r1, [pc, #56]	; (80003bc <display_time+0x58>)
 8000382:	480f      	ldr	r0, [pc, #60]	; (80003c0 <display_time+0x5c>)
 8000384:	f000 fb4c 	bl	8000a20 <SSD1306_Puts>
	  SSD1306_GotoXY(20, 25);
 8000388:	2119      	movs	r1, #25
 800038a:	2014      	movs	r0, #20
 800038c:	f000 fab2 	bl	80008f4 <SSD1306_GotoXY>
	  SSD1306_Puts(aShowTime, &Font_11x18, 1);
 8000390:	2201      	movs	r2, #1
 8000392:	490a      	ldr	r1, [pc, #40]	; (80003bc <display_time+0x58>)
 8000394:	4808      	ldr	r0, [pc, #32]	; (80003b8 <display_time+0x54>)
 8000396:	f000 fb43 	bl	8000a20 <SSD1306_Puts>
	  SSD1306_GotoXY(15, 45);
 800039a:	212d      	movs	r1, #45	; 0x2d
 800039c:	200f      	movs	r0, #15
 800039e:	f000 faa9 	bl	80008f4 <SSD1306_GotoXY>
	  SSD1306_Puts(aShowDate, &Font_11x18, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	4905      	ldr	r1, [pc, #20]	; (80003bc <display_time+0x58>)
 80003a6:	4803      	ldr	r0, [pc, #12]	; (80003b4 <display_time+0x50>)
 80003a8:	f000 fb3a 	bl	8000a20 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80003ac:	f000 f9fc 	bl	80007a8 <SSD1306_UpdateScreen>



}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	200000c8 	.word	0x200000c8
 80003b8:	20000094 	.word	0x20000094
 80003bc:	20000000 	.word	0x20000000
 80003c0:	080046a4 	.word	0x080046a4

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b096      	sub	sp, #88	; 0x58
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	2244      	movs	r2, #68	; 0x44
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 fcca 	bl	8003d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	463b      	mov	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ea:	f001 fe15 	bl	8002018 <HAL_PWREx_ControlVoltageScaling>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003f4:	f000 f90e 	bl	8000614 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80003f8:	230a      	movs	r3, #10
 80003fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000400:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000402:	2310      	movs	r3, #16
 8000404:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000406:	2301      	movs	r3, #1
 8000408:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040a:	2302      	movs	r3, #2
 800040c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800040e:	2302      	movs	r3, #2
 8000410:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000412:	2301      	movs	r3, #1
 8000414:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000416:	2308      	movs	r3, #8
 8000418:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800041a:	2307      	movs	r3, #7
 800041c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800041e:	2302      	movs	r3, #2
 8000420:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000422:	2302      	movs	r3, #2
 8000424:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	4618      	mov	r0, r3
 800042c:	f001 fe4a 	bl	80020c4 <HAL_RCC_OscConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000436:	f000 f8ed 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043a:	230f      	movs	r3, #15
 800043c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043e:	2303      	movs	r3, #3
 8000440:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800044e:	463b      	mov	r3, r7
 8000450:	2103      	movs	r1, #3
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fa12 	bl	800287c <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800045e:	f000 f8d9 	bl	8000614 <Error_Handler>
  }
}
 8000462:	bf00      	nop
 8000464:	3758      	adds	r7, #88	; 0x58
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000472:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <MX_I2C1_Init+0x78>)
 8000474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000476:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000478:	4a1b      	ldr	r2, [pc, #108]	; (80004e8 <MX_I2C1_Init+0x7c>)
 800047a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_I2C1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000482:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000484:	2201      	movs	r2, #1
 8000486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <MX_I2C1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_I2C1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a6:	480e      	ldr	r0, [pc, #56]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004a8:	f001 f86c 	bl	8001584 <HAL_I2C_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004b2:	f000 f8af 	bl	8000614 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004b6:	2100      	movs	r1, #0
 80004b8:	4809      	ldr	r0, [pc, #36]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004ba:	f001 fd07 	bl	8001ecc <HAL_I2CEx_ConfigAnalogFilter>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004c4:	f000 f8a6 	bl	8000614 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c8:	2100      	movs	r1, #0
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004cc:	f001 fd49 	bl	8001f62 <HAL_I2CEx_ConfigDigitalFilter>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004d6:	f000 f89d 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	200000fc 	.word	0x200000fc
 80004e4:	40005400 	.word	0x40005400
 80004e8:	00602173 	.word	0x00602173

080004ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000500:	2300      	movs	r3, #0
 8000502:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000504:	4b2f      	ldr	r3, [pc, #188]	; (80005c4 <MX_RTC_Init+0xd8>)
 8000506:	4a30      	ldr	r2, [pc, #192]	; (80005c8 <MX_RTC_Init+0xdc>)
 8000508:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800050a:	4b2e      	ldr	r3, [pc, #184]	; (80005c4 <MX_RTC_Init+0xd8>)
 800050c:	2240      	movs	r2, #64	; 0x40
 800050e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000510:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <MX_RTC_Init+0xd8>)
 8000512:	227f      	movs	r2, #127	; 0x7f
 8000514:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000516:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <MX_RTC_Init+0xd8>)
 8000518:	22ff      	movs	r2, #255	; 0xff
 800051a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800051c:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <MX_RTC_Init+0xd8>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000522:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <MX_RTC_Init+0xd8>)
 8000524:	2200      	movs	r2, #0
 8000526:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000528:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <MX_RTC_Init+0xd8>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_RTC_Init+0xd8>)
 8000530:	2200      	movs	r2, #0
 8000532:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000534:	4823      	ldr	r0, [pc, #140]	; (80005c4 <MX_RTC_Init+0xd8>)
 8000536:	f003 f849 	bl	80035cc <HAL_RTC_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000540:	f000 f868 	bl	8000614 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x4;
 8000544:	2304      	movs	r3, #4
 8000546:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x14;
 8000548:	2314      	movs	r3, #20
 800054a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800054c:	2300      	movs	r3, #0
 800054e:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000550:	2300      	movs	r3, #0
 8000552:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2201      	movs	r2, #1
 8000560:	4619      	mov	r1, r3
 8000562:	4818      	ldr	r0, [pc, #96]	; (80005c4 <MX_RTC_Init+0xd8>)
 8000564:	f003 f8ad 	bl	80036c2 <HAL_RTC_SetTime>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 800056e:	f000 f851 	bl	8000614 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000572:	2303      	movs	r3, #3
 8000574:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8000576:	2307      	movs	r3, #7
 8000578:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 800057a:	2310      	movs	r3, #16
 800057c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 800057e:	2322      	movs	r3, #34	; 0x22
 8000580:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000582:	463b      	mov	r3, r7
 8000584:	2201      	movs	r2, #1
 8000586:	4619      	mov	r1, r3
 8000588:	480e      	ldr	r0, [pc, #56]	; (80005c4 <MX_RTC_Init+0xd8>)
 800058a:	f003 f993 	bl	80038b4 <HAL_RTC_SetDate>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8000594:	f000 f83e 	bl	8000614 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <MX_RTC_Init+0xd8>)
 800059e:	f003 fb2f 	bl	8003c00 <HAL_RTCEx_SetTimeStamp>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 80005a8:	f000 f834 	bl	8000614 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_RTC_Init+0xd8>)
 80005ae:	f003 fb6f 	bl	8003c90 <HAL_RTCEx_SetRefClock>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 80005b8:	f000 f82c 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000150 	.word	0x20000150
 80005c8:	40002800 	.word	0x40002800

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_GPIO_Init+0x44>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <MX_GPIO_Init+0x44>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_GPIO_Init+0x44>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_GPIO_Init+0x44>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <MX_GPIO_Init+0x44>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_GPIO_Init+0x44>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000626:	f000 fa29 	bl	8000a7c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800062a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800062e:	2201      	movs	r2, #1
 8000630:	2178      	movs	r1, #120	; 0x78
 8000632:	485b      	ldr	r0, [pc, #364]	; (80007a0 <SSD1306_Init+0x180>)
 8000634:	f001 f92a 	bl	800188c <HAL_I2C_IsDeviceReady>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800063e:	2300      	movs	r3, #0
 8000640:	e0a9      	b.n	8000796 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000642:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000646:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000648:	e002      	b.n	8000650 <SSD1306_Init+0x30>
		p--;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3b01      	subs	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1f9      	bne.n	800064a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000656:	22ae      	movs	r2, #174	; 0xae
 8000658:	2100      	movs	r1, #0
 800065a:	2078      	movs	r0, #120	; 0x78
 800065c:	f000 fa8a 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000660:	2220      	movs	r2, #32
 8000662:	2100      	movs	r1, #0
 8000664:	2078      	movs	r0, #120	; 0x78
 8000666:	f000 fa85 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800066a:	2210      	movs	r2, #16
 800066c:	2100      	movs	r1, #0
 800066e:	2078      	movs	r0, #120	; 0x78
 8000670:	f000 fa80 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000674:	22b0      	movs	r2, #176	; 0xb0
 8000676:	2100      	movs	r1, #0
 8000678:	2078      	movs	r0, #120	; 0x78
 800067a:	f000 fa7b 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800067e:	22c8      	movs	r2, #200	; 0xc8
 8000680:	2100      	movs	r1, #0
 8000682:	2078      	movs	r0, #120	; 0x78
 8000684:	f000 fa76 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2078      	movs	r0, #120	; 0x78
 800068e:	f000 fa71 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000692:	2210      	movs	r2, #16
 8000694:	2100      	movs	r1, #0
 8000696:	2078      	movs	r0, #120	; 0x78
 8000698:	f000 fa6c 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800069c:	2240      	movs	r2, #64	; 0x40
 800069e:	2100      	movs	r1, #0
 80006a0:	2078      	movs	r0, #120	; 0x78
 80006a2:	f000 fa67 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80006a6:	2281      	movs	r2, #129	; 0x81
 80006a8:	2100      	movs	r1, #0
 80006aa:	2078      	movs	r0, #120	; 0x78
 80006ac:	f000 fa62 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	2100      	movs	r1, #0
 80006b4:	2078      	movs	r0, #120	; 0x78
 80006b6:	f000 fa5d 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80006ba:	22a1      	movs	r2, #161	; 0xa1
 80006bc:	2100      	movs	r1, #0
 80006be:	2078      	movs	r0, #120	; 0x78
 80006c0:	f000 fa58 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80006c4:	22a6      	movs	r2, #166	; 0xa6
 80006c6:	2100      	movs	r1, #0
 80006c8:	2078      	movs	r0, #120	; 0x78
 80006ca:	f000 fa53 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80006ce:	22a8      	movs	r2, #168	; 0xa8
 80006d0:	2100      	movs	r1, #0
 80006d2:	2078      	movs	r0, #120	; 0x78
 80006d4:	f000 fa4e 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80006d8:	223f      	movs	r2, #63	; 0x3f
 80006da:	2100      	movs	r1, #0
 80006dc:	2078      	movs	r0, #120	; 0x78
 80006de:	f000 fa49 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80006e2:	22a4      	movs	r2, #164	; 0xa4
 80006e4:	2100      	movs	r1, #0
 80006e6:	2078      	movs	r0, #120	; 0x78
 80006e8:	f000 fa44 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80006ec:	22d3      	movs	r2, #211	; 0xd3
 80006ee:	2100      	movs	r1, #0
 80006f0:	2078      	movs	r0, #120	; 0x78
 80006f2:	f000 fa3f 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2078      	movs	r0, #120	; 0x78
 80006fc:	f000 fa3a 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000700:	22d5      	movs	r2, #213	; 0xd5
 8000702:	2100      	movs	r1, #0
 8000704:	2078      	movs	r0, #120	; 0x78
 8000706:	f000 fa35 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800070a:	22f0      	movs	r2, #240	; 0xf0
 800070c:	2100      	movs	r1, #0
 800070e:	2078      	movs	r0, #120	; 0x78
 8000710:	f000 fa30 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000714:	22d9      	movs	r2, #217	; 0xd9
 8000716:	2100      	movs	r1, #0
 8000718:	2078      	movs	r0, #120	; 0x78
 800071a:	f000 fa2b 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800071e:	2222      	movs	r2, #34	; 0x22
 8000720:	2100      	movs	r1, #0
 8000722:	2078      	movs	r0, #120	; 0x78
 8000724:	f000 fa26 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000728:	22da      	movs	r2, #218	; 0xda
 800072a:	2100      	movs	r1, #0
 800072c:	2078      	movs	r0, #120	; 0x78
 800072e:	f000 fa21 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000732:	2212      	movs	r2, #18
 8000734:	2100      	movs	r1, #0
 8000736:	2078      	movs	r0, #120	; 0x78
 8000738:	f000 fa1c 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800073c:	22db      	movs	r2, #219	; 0xdb
 800073e:	2100      	movs	r1, #0
 8000740:	2078      	movs	r0, #120	; 0x78
 8000742:	f000 fa17 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000746:	2220      	movs	r2, #32
 8000748:	2100      	movs	r1, #0
 800074a:	2078      	movs	r0, #120	; 0x78
 800074c:	f000 fa12 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000750:	228d      	movs	r2, #141	; 0x8d
 8000752:	2100      	movs	r1, #0
 8000754:	2078      	movs	r0, #120	; 0x78
 8000756:	f000 fa0d 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800075a:	2214      	movs	r2, #20
 800075c:	2100      	movs	r1, #0
 800075e:	2078      	movs	r0, #120	; 0x78
 8000760:	f000 fa08 	bl	8000b74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000764:	22af      	movs	r2, #175	; 0xaf
 8000766:	2100      	movs	r1, #0
 8000768:	2078      	movs	r0, #120	; 0x78
 800076a:	f000 fa03 	bl	8000b74 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800076e:	222e      	movs	r2, #46	; 0x2e
 8000770:	2100      	movs	r1, #0
 8000772:	2078      	movs	r0, #120	; 0x78
 8000774:	f000 f9fe 	bl	8000b74 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000778:	2000      	movs	r0, #0
 800077a:	f000 f843 	bl	8000804 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800077e:	f000 f813 	bl	80007a8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <SSD1306_Init+0x184>)
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <SSD1306_Init+0x184>)
 800078a:	2200      	movs	r2, #0
 800078c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SSD1306_Init+0x184>)
 8000790:	2201      	movs	r2, #1
 8000792:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000794:	2301      	movs	r3, #1
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000fc 	.word	0x200000fc
 80007a4:	20000574 	.word	0x20000574

080007a8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	e01d      	b.n	80007f0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	3b50      	subs	r3, #80	; 0x50
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	2078      	movs	r0, #120	; 0x78
 80007c0:	f000 f9d8 	bl	8000b74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	2078      	movs	r0, #120	; 0x78
 80007ca:	f000 f9d3 	bl	8000b74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
 80007d2:	2078      	movs	r0, #120	; 0x78
 80007d4:	f000 f9ce 	bl	8000b74 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	01db      	lsls	r3, r3, #7
 80007dc:	4a08      	ldr	r2, [pc, #32]	; (8000800 <SSD1306_UpdateScreen+0x58>)
 80007de:	441a      	add	r2, r3
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	2140      	movs	r1, #64	; 0x40
 80007e4:	2078      	movs	r0, #120	; 0x78
 80007e6:	f000 f95f 	bl	8000aa8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	3301      	adds	r3, #1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b07      	cmp	r3, #7
 80007f4:	d9de      	bls.n	80007b4 <SSD1306_UpdateScreen+0xc>
	}
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000174 	.word	0x20000174

08000804 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d101      	bne.n	8000818 <SSD1306_Fill+0x14>
 8000814:	2300      	movs	r3, #0
 8000816:	e000      	b.n	800081a <SSD1306_Fill+0x16>
 8000818:	23ff      	movs	r3, #255	; 0xff
 800081a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800081e:	4619      	mov	r1, r3
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <SSD1306_Fill+0x2c>)
 8000822:	f003 faa3 	bl	8003d6c <memset>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000174 	.word	0x20000174

08000834 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
 800083e:	460b      	mov	r3, r1
 8000840:	80bb      	strh	r3, [r7, #4]
 8000842:	4613      	mov	r3, r2
 8000844:	70fb      	strb	r3, [r7, #3]
	if (
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	2b7f      	cmp	r3, #127	; 0x7f
 800084a:	d848      	bhi.n	80008de <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800084c:	88bb      	ldrh	r3, [r7, #4]
 800084e:	2b3f      	cmp	r3, #63	; 0x3f
 8000850:	d845      	bhi.n	80008de <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <SSD1306_DrawPixel+0xb8>)
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d006      	beq.n	8000868 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	2b00      	cmp	r3, #0
 800085e:	bf0c      	ite	eq
 8000860:	2301      	moveq	r3, #1
 8000862:	2300      	movne	r3, #0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d11a      	bne.n	80008a4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800086e:	88fa      	ldrh	r2, [r7, #6]
 8000870:	88bb      	ldrh	r3, [r7, #4]
 8000872:	08db      	lsrs	r3, r3, #3
 8000874:	b298      	uxth	r0, r3
 8000876:	4603      	mov	r3, r0
 8000878:	01db      	lsls	r3, r3, #7
 800087a:	4413      	add	r3, r2
 800087c:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <SSD1306_DrawPixel+0xbc>)
 800087e:	5cd3      	ldrb	r3, [r2, r3]
 8000880:	b25a      	sxtb	r2, r3
 8000882:	88bb      	ldrh	r3, [r7, #4]
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	2101      	movs	r1, #1
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	b25b      	sxtb	r3, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	b259      	sxtb	r1, r3
 8000894:	88fa      	ldrh	r2, [r7, #6]
 8000896:	4603      	mov	r3, r0
 8000898:	01db      	lsls	r3, r3, #7
 800089a:	4413      	add	r3, r2
 800089c:	b2c9      	uxtb	r1, r1
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <SSD1306_DrawPixel+0xbc>)
 80008a0:	54d1      	strb	r1, [r2, r3]
 80008a2:	e01d      	b.n	80008e0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008a4:	88fa      	ldrh	r2, [r7, #6]
 80008a6:	88bb      	ldrh	r3, [r7, #4]
 80008a8:	08db      	lsrs	r3, r3, #3
 80008aa:	b298      	uxth	r0, r3
 80008ac:	4603      	mov	r3, r0
 80008ae:	01db      	lsls	r3, r3, #7
 80008b0:	4413      	add	r3, r2
 80008b2:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <SSD1306_DrawPixel+0xbc>)
 80008b4:	5cd3      	ldrb	r3, [r2, r3]
 80008b6:	b25a      	sxtb	r2, r3
 80008b8:	88bb      	ldrh	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	2101      	movs	r1, #1
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	b25b      	sxtb	r3, r3
 80008ca:	4013      	ands	r3, r2
 80008cc:	b259      	sxtb	r1, r3
 80008ce:	88fa      	ldrh	r2, [r7, #6]
 80008d0:	4603      	mov	r3, r0
 80008d2:	01db      	lsls	r3, r3, #7
 80008d4:	4413      	add	r3, r2
 80008d6:	b2c9      	uxtb	r1, r1
 80008d8:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <SSD1306_DrawPixel+0xbc>)
 80008da:	54d1      	strb	r1, [r2, r3]
 80008dc:	e000      	b.n	80008e0 <SSD1306_DrawPixel+0xac>
		return;
 80008de:	bf00      	nop
	}
}
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	20000574 	.word	0x20000574
 80008f0:	20000174 	.word	0x20000174

080008f4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	80fb      	strh	r3, [r7, #6]
 8000900:	4613      	mov	r3, r2
 8000902:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000904:	4a05      	ldr	r2, [pc, #20]	; (800091c <SSD1306_GotoXY+0x28>)
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800090a:	4a04      	ldr	r2, [pc, #16]	; (800091c <SSD1306_GotoXY+0x28>)
 800090c:	88bb      	ldrh	r3, [r7, #4]
 800090e:	8053      	strh	r3, [r2, #2]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	20000574 	.word	0x20000574

08000920 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	4613      	mov	r3, r2
 800092e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000930:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <SSD1306_Putc+0xfc>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
	if (
 800093c:	2b7f      	cmp	r3, #127	; 0x7f
 800093e:	dc07      	bgt.n	8000950 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <SSD1306_Putc+0xfc>)
 8000942:	885b      	ldrh	r3, [r3, #2]
 8000944:	461a      	mov	r2, r3
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	785b      	ldrb	r3, [r3, #1]
 800094a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800094c:	2b3f      	cmp	r3, #63	; 0x3f
 800094e:	dd01      	ble.n	8000954 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000950:	2300      	movs	r3, #0
 8000952:	e05e      	b.n	8000a12 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e04b      	b.n	80009f2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	3b20      	subs	r3, #32
 8000962:	6839      	ldr	r1, [r7, #0]
 8000964:	7849      	ldrb	r1, [r1, #1]
 8000966:	fb01 f303 	mul.w	r3, r1, r3
 800096a:	4619      	mov	r1, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	440b      	add	r3, r1
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	e030      	b.n	80009e0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d010      	beq.n	80009b0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <SSD1306_Putc+0xfc>)
 8000990:	881a      	ldrh	r2, [r3, #0]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	b29b      	uxth	r3, r3
 8000996:	4413      	add	r3, r2
 8000998:	b298      	uxth	r0, r3
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <SSD1306_Putc+0xfc>)
 800099c:	885a      	ldrh	r2, [r3, #2]
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	4413      	add	r3, r2
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	79ba      	ldrb	r2, [r7, #6]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f7ff ff43 	bl	8000834 <SSD1306_DrawPixel>
 80009ae:	e014      	b.n	80009da <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <SSD1306_Putc+0xfc>)
 80009b2:	881a      	ldrh	r2, [r3, #0]
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	4413      	add	r3, r2
 80009ba:	b298      	uxth	r0, r3
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <SSD1306_Putc+0xfc>)
 80009be:	885a      	ldrh	r2, [r3, #2]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	4413      	add	r3, r2
 80009c6:	b299      	uxth	r1, r3
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bf0c      	ite	eq
 80009ce:	2301      	moveq	r3, #1
 80009d0:	2300      	movne	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	461a      	mov	r2, r3
 80009d6:	f7ff ff2d 	bl	8000834 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	3301      	adds	r3, #1
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d3c8      	bcc.n	800097e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	3301      	adds	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	785b      	ldrb	r3, [r3, #1]
 80009f6:	461a      	mov	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d3ad      	bcc.n	800095a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <SSD1306_Putc+0xfc>)
 8000a00:	881a      	ldrh	r2, [r3, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	4413      	add	r3, r2
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <SSD1306_Putc+0xfc>)
 8000a0e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000a10:	79fb      	ldrb	r3, [r7, #7]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000574 	.word	0x20000574

08000a20 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000a2e:	e012      	b.n	8000a56 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	68b9      	ldr	r1, [r7, #8]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff71 	bl	8000920 <SSD1306_Putc>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d002      	beq.n	8000a50 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	e008      	b.n	8000a62 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3301      	adds	r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1e8      	bne.n	8000a30 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	781b      	ldrb	r3, [r3, #0]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fec8 	bl	8000804 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000a74:	f7ff fe98 	bl	80007a8 <SSD1306_UpdateScreen>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <ssd1306_I2C_Init+0x28>)
 8000a84:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a86:	e002      	b.n	8000a8e <ssd1306_I2C_Init+0x12>
		p--;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f9      	bne.n	8000a88 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	0003d090 	.word	0x0003d090

08000aa8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b0c7      	sub	sp, #284	; 0x11c
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	4604      	mov	r4, r0
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000ab6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000aba:	600a      	str	r2, [r1, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ac2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ac6:	4622      	mov	r2, r4
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ace:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ada:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ade:	460a      	mov	r2, r1
 8000ae0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000ae2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000aea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000aee:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000af2:	7812      	ldrb	r2, [r2, #0]
 8000af4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000afc:	e015      	b.n	8000b2a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000afe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b02:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b06:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000b0a:	6812      	ldr	r2, [r2, #0]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b12:	3301      	adds	r3, #1
 8000b14:	7811      	ldrb	r1, [r2, #0]
 8000b16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b1a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000b1e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000b20:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b24:	3301      	adds	r3, #1
 8000b26:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000b2a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b34:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000b38:	8812      	ldrh	r2, [r2, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d8df      	bhi.n	8000afe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b42:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b299      	uxth	r1, r3
 8000b4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	f107 020c 	add.w	r2, r7, #12
 8000b5c:	200a      	movs	r0, #10
 8000b5e:	9000      	str	r0, [sp, #0]
 8000b60:	4803      	ldr	r0, [pc, #12]	; (8000b70 <ssd1306_I2C_WriteMulti+0xc8>)
 8000b62:	f000 fd9f 	bl	80016a4 <HAL_I2C_Master_Transmit>
}
 8000b66:	bf00      	nop
 8000b68:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd90      	pop	{r4, r7, pc}
 8000b70:	200000fc 	.word	0x200000fc

08000b74 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	71bb      	strb	r3, [r7, #6]
 8000b82:	4613      	mov	r3, r2
 8000b84:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b86:	79bb      	ldrb	r3, [r7, #6]
 8000b88:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b8a:	797b      	ldrb	r3, [r7, #5]
 8000b8c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	b299      	uxth	r1, r3
 8000b92:	f107 020c 	add.w	r2, r7, #12
 8000b96:	230a      	movs	r3, #10
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <ssd1306_I2C_Write+0x38>)
 8000b9e:	f000 fd81 	bl	80016a4 <HAL_I2C_Master_Transmit>
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000fc 	.word	0x200000fc

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0ac      	sub	sp, #176	; 0xb0
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2288      	movs	r2, #136	; 0x88
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 f8a7 	bl	8003d6c <memset>
  if(hi2c->Instance==I2C1)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <HAL_I2C_MspInit+0xc0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d142      	bne.n	8000cae <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c28:	2340      	movs	r3, #64	; 0x40
 8000c2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4618      	mov	r0, r3
 8000c36:	f002 f80d 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c40:	f7ff fce8 	bl	8000614 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c48:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c54:	f003 0302 	and.w	r3, r3, #2
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c5c:	23c0      	movs	r3, #192	; 0xc0
 8000c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c62:	2312      	movs	r3, #18
 8000c64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c74:	2304      	movs	r3, #4
 8000c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <HAL_I2C_MspInit+0xc8>)
 8000c82:	f000 fad5 	bl	8001230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c90:	6593      	str	r3, [r2, #88]	; 0x58
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	201f      	movs	r0, #31
 8000ca4:	f000 fa8d 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ca8:	201f      	movs	r0, #31
 8000caa:	f000 faa6 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	37b0      	adds	r7, #176	; 0xb0
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	48000400 	.word	0x48000400

08000cc4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0aa      	sub	sp, #168	; 0xa8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2288      	movs	r2, #136	; 0x88
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 f841 	bl	8003d6c <memset>
  if(hrtc->Instance==RTC)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <HAL_RTC_MspInit+0xb0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d13a      	bne.n	8000d6a <HAL_RTC_MspInit+0xa6>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 ffa4 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8000d12:	f7ff fc7f 	bl	8000614 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_RTC_MspInit+0xb4>)
 8000d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d1c:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <HAL_RTC_MspInit+0xb4>)
 8000d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_RTC_MspInit+0xb4>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <HAL_RTC_MspInit+0xb4>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_RTC_MspInit+0xb4>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_RTC_MspInit+0xb8>)
 8000d66:	f000 fa63 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	37a8      	adds	r7, #168	; 0xa8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40002800 	.word	0x40002800
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	48000400 	.word	0x48000400

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dcc:	f000 f8da 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <I2C1_EV_IRQHandler+0x10>)
 8000dda:	f000 fe5e 	bl	8001a9a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000fc 	.word	0x200000fc

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f002 ff7e 	bl	8003d18 <__errno>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <_sbrk+0x64>)
 8000e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20018000 	.word	0x20018000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	2000057c 	.word	0x2000057c
 8000e50:	20000598 	.word	0x20000598

08000e54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e7c:	f7ff ffea 	bl	8000e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <LoopForever+0xe>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	; (8000ec4 <LoopForever+0x16>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f002 ff3d 	bl	8003d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eaa:	f7ff f9e1 	bl	8000270 <main>

08000eae <LoopForever>:

LoopForever:
    b LoopForever
 8000eae:	e7fe      	b.n	8000eae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ebc:	08005488 	.word	0x08005488
  ldr r2, =_sbss
 8000ec0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ec4:	20000594 	.word	0x20000594

08000ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC1_2_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_Init+0x3c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <HAL_Init+0x3c>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f000 f962 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f000 f80f 	bl	8000f0c <HAL_InitTick>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	e001      	b.n	8000efe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000efa:	f7ff fe59 	bl	8000bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_InitTick+0x6c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d023      	beq.n	8000f68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_InitTick+0x70>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_InitTick+0x6c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f96d 	bl	8001216 <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10f      	bne.n	8000f62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d809      	bhi.n	8000f5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 f937 	bl	80011c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_InitTick+0x74>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e007      	b.n	8000f6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e004      	b.n	8000f6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e001      	b.n	8000f6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000010 	.word	0x20000010
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	2000000c 	.word	0x2000000c

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000010 	.word	0x20000010
 8000fa8:	20000580 	.word	0x20000580

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000580 	.word	0x20000580

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000010 	.word	0x20000010

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff3e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff31 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e17f      	b.n	8001540 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8171 	beq.w	800153a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d005      	beq.n	8001270 <HAL_GPIO_Init+0x40>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d130      	bne.n	80012d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012a6:	2201      	movs	r2, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f003 0201 	and.w	r2, r3, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d118      	bne.n	8001310 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012e4:	2201      	movs	r2, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	f003 0201 	and.w	r2, r3, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b03      	cmp	r3, #3
 800131a:	d017      	beq.n	800134c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d123      	bne.n	80013a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	08da      	lsrs	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3208      	adds	r2, #8
 800139a:	6939      	ldr	r1, [r7, #16]
 800139c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0203 	and.w	r2, r3, #3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80ac 	beq.w	800153a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_GPIO_Init+0x330>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e6:	4a5e      	ldr	r2, [pc, #376]	; (8001560 <HAL_GPIO_Init+0x330>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6613      	str	r3, [r2, #96]	; 0x60
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <HAL_GPIO_Init+0x330>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013fa:	4a5a      	ldr	r2, [pc, #360]	; (8001564 <HAL_GPIO_Init+0x334>)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001424:	d025      	beq.n	8001472 <HAL_GPIO_Init+0x242>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4f      	ldr	r2, [pc, #316]	; (8001568 <HAL_GPIO_Init+0x338>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01f      	beq.n	800146e <HAL_GPIO_Init+0x23e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4e      	ldr	r2, [pc, #312]	; (800156c <HAL_GPIO_Init+0x33c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0x23a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4d      	ldr	r2, [pc, #308]	; (8001570 <HAL_GPIO_Init+0x340>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x236>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <HAL_GPIO_Init+0x344>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x232>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4b      	ldr	r2, [pc, #300]	; (8001578 <HAL_GPIO_Init+0x348>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x22e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4a      	ldr	r2, [pc, #296]	; (800157c <HAL_GPIO_Init+0x34c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x22a>
 8001456:	2306      	movs	r3, #6
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x244>
 800145a:	2307      	movs	r3, #7
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x244>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x244>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x244>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x244>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x244>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x244>
 8001472:	2300      	movs	r3, #0
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001484:	4937      	ldr	r1, [pc, #220]	; (8001564 <HAL_GPIO_Init+0x334>)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001492:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_GPIO_Init+0x350>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b6:	4a32      	ldr	r2, [pc, #200]	; (8001580 <HAL_GPIO_Init+0x350>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <HAL_GPIO_Init+0x350>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e0:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_GPIO_Init+0x350>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_GPIO_Init+0x350>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_GPIO_Init+0x350>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_GPIO_Init+0x350>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <HAL_GPIO_Init+0x350>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa22 f303 	lsr.w	r3, r2, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	f47f ae78 	bne.w	8001240 <HAL_GPIO_Init+0x10>
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000
 8001568:	48000400 	.word	0x48000400
 800156c:	48000800 	.word	0x48000800
 8001570:	48000c00 	.word	0x48000c00
 8001574:	48001000 	.word	0x48001000
 8001578:	48001400 	.word	0x48001400
 800157c:	48001800 	.word	0x48001800
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e081      	b.n	800169a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fb24 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2224      	movs	r2, #36	; 0x24
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	e006      	b.n	800160c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800160a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d104      	bne.n	800161e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800161c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800162c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001630:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001640:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69d9      	ldr	r1, [r3, #28]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2220      	movs	r2, #32
 8001686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	461a      	mov	r2, r3
 80016b0:	460b      	mov	r3, r1
 80016b2:	817b      	strh	r3, [r7, #10]
 80016b4:	4613      	mov	r3, r2
 80016b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	f040 80da 	bne.w	800187a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_I2C_Master_Transmit+0x30>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e0d3      	b.n	800187c <HAL_I2C_Master_Transmit+0x1d8>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016dc:	f7ff fc66 	bl	8000fac <HAL_GetTick>
 80016e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2319      	movs	r3, #25
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 fa11 	bl	8001b16 <I2C_WaitOnFlagUntilTimeout>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0be      	b.n	800187c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2221      	movs	r2, #33	; 0x21
 8001702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2210      	movs	r2, #16
 800170a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	893a      	ldrh	r2, [r7, #8]
 800171e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	2bff      	cmp	r3, #255	; 0xff
 800172e:	d90e      	bls.n	800174e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	22ff      	movs	r2, #255	; 0xff
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173a:	b2da      	uxtb	r2, r3
 800173c:	8979      	ldrh	r1, [r7, #10]
 800173e:	4b51      	ldr	r3, [pc, #324]	; (8001884 <HAL_I2C_Master_Transmit+0x1e0>)
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fb8e 	bl	8001e68 <I2C_TransferConfig>
 800174c:	e06c      	b.n	8001828 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	b2da      	uxtb	r2, r3
 800175e:	8979      	ldrh	r1, [r7, #10]
 8001760:	4b48      	ldr	r3, [pc, #288]	; (8001884 <HAL_I2C_Master_Transmit+0x1e0>)
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 fb7d 	bl	8001e68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800176e:	e05b      	b.n	8001828 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	6a39      	ldr	r1, [r7, #32]
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fa0e 	bl	8001b96 <I2C_WaitOnTXISFlagUntilTimeout>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e07b      	b.n	800187c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d034      	beq.n	8001828 <HAL_I2C_Master_Transmit+0x184>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d130      	bne.n	8001828 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	2200      	movs	r2, #0
 80017ce:	2180      	movs	r1, #128	; 0x80
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 f9a0 	bl	8001b16 <I2C_WaitOnFlagUntilTimeout>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e04d      	b.n	800187c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	d90e      	bls.n	8001808 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	22ff      	movs	r2, #255	; 0xff
 80017ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	8979      	ldrh	r1, [r7, #10]
 80017f8:	2300      	movs	r3, #0
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fb31 	bl	8001e68 <I2C_TransferConfig>
 8001806:	e00f      	b.n	8001828 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001816:	b2da      	uxtb	r2, r3
 8001818:	8979      	ldrh	r1, [r7, #10]
 800181a:	2300      	movs	r3, #0
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fb20 	bl	8001e68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182c:	b29b      	uxth	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d19e      	bne.n	8001770 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	6a39      	ldr	r1, [r7, #32]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 f9ed 	bl	8001c16 <I2C_WaitOnSTOPFlagUntilTimeout>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e01a      	b.n	800187c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2220      	movs	r2, #32
 800184c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_I2C_Master_Transmit+0x1e4>)
 800185a:	400b      	ands	r3, r1
 800185c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2220      	movs	r2, #32
 8001862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800187a:	2302      	movs	r3, #2
  }
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	80002000 	.word	0x80002000
 8001888:	fe00e800 	.word	0xfe00e800

0800188c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af02      	add	r7, sp, #8
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	460b      	mov	r3, r1
 800189a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	f040 80f1 	bne.w	8001a90 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018bc:	d101      	bne.n	80018c2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80018be:	2302      	movs	r3, #2
 80018c0:	e0e7      	b.n	8001a92 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_I2C_IsDeviceReady+0x44>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e0e0      	b.n	8001a92 <HAL_I2C_IsDeviceReady+0x206>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2224      	movs	r2, #36	; 0x24
 80018dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_I2C_IsDeviceReady+0x72>
 80018ee:	897b      	ldrh	r3, [r7, #10]
 80018f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018fc:	e004      	b.n	8001908 <HAL_I2C_IsDeviceReady+0x7c>
 80018fe:	897b      	ldrh	r3, [r7, #10]
 8001900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001904:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800190e:	f7ff fb4d 	bl	8000fac <HAL_GetTick>
 8001912:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b20      	cmp	r3, #32
 8001920:	bf0c      	ite	eq
 8001922:	2301      	moveq	r3, #1
 8001924:	2300      	movne	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b10      	cmp	r3, #16
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001940:	e034      	b.n	80019ac <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d01a      	beq.n	8001980 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7ff fb2f 	bl	8000fac <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d302      	bcc.n	8001960 <HAL_I2C_IsDeviceReady+0xd4>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10f      	bne.n	8001980 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	f043 0220 	orr.w	r2, r3, #32
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e088      	b.n	8001a92 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	2b20      	cmp	r3, #32
 800198c:	bf0c      	ite	eq
 800198e:	2301      	moveq	r3, #1
 8001990:	2300      	movne	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b10      	cmp	r3, #16
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80019ac:	7ffb      	ldrb	r3, [r7, #31]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <HAL_I2C_IsDeviceReady+0x12c>
 80019b2:	7fbb      	ldrb	r3, [r7, #30]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0c4      	beq.n	8001942 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b10      	cmp	r3, #16
 80019c4:	d01a      	beq.n	80019fc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2200      	movs	r2, #0
 80019ce:	2120      	movs	r1, #32
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 f8a0 	bl	8001b16 <I2C_WaitOnFlagUntilTimeout>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e058      	b.n	8001a92 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2220      	movs	r2, #32
 80019e6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e04a      	b.n	8001a92 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2200      	movs	r2, #0
 8001a04:	2120      	movs	r1, #32
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f885 	bl	8001b16 <I2C_WaitOnFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e03d      	b.n	8001a92 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2220      	movs	r2, #32
 8001a24:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d118      	bne.n	8001a60 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a3c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2200      	movs	r2, #0
 8001a46:	2120      	movs	r1, #32
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f864 	bl	8001b16 <I2C_WaitOnFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e01c      	b.n	8001a92 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	f63f af3b 	bhi.w	80018e6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d103      	bne.n	8001aec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d007      	beq.n	8001b0a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699a      	ldr	r2, [r3, #24]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	619a      	str	r2, [r3, #24]
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	4613      	mov	r3, r2
 8001b24:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b26:	e022      	b.n	8001b6e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2e:	d01e      	beq.n	8001b6e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b30:	f7ff fa3c 	bl	8000fac <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d302      	bcc.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d113      	bne.n	8001b6e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f043 0220 	orr.w	r2, r3, #32
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2220      	movs	r2, #32
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00f      	b.n	8001b8e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4013      	ands	r3, r2
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	2300      	movne	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d0cd      	beq.n	8001b28 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ba2:	e02c      	b.n	8001bfe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f871 	bl	8001c90 <I2C_IsErrorOccurred>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e02a      	b.n	8001c0e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbe:	d01e      	beq.n	8001bfe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc0:	f7ff f9f4 	bl	8000fac <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d302      	bcc.n	8001bd6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d113      	bne.n	8001bfe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e007      	b.n	8001c0e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d1cb      	bne.n	8001ba4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c22:	e028      	b.n	8001c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f831 	bl	8001c90 <I2C_IsErrorOccurred>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e026      	b.n	8001c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c38:	f7ff f9b8 	bl	8000fac <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d302      	bcc.n	8001c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d113      	bne.n	8001c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f043 0220 	orr.w	r2, r3, #32
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e007      	b.n	8001c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d1cf      	bne.n	8001c24 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d075      	beq.n	8001da8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cc4:	e056      	b.n	8001d74 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d052      	beq.n	8001d74 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cce:	f7ff f96d 	bl	8000fac <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d302      	bcc.n	8001ce4 <I2C_IsErrorOccurred+0x54>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d147      	bne.n	8001d74 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d06:	d12e      	bne.n	8001d66 <I2C_IsErrorOccurred+0xd6>
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d0e:	d02a      	beq.n	8001d66 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001d10:	7cfb      	ldrb	r3, [r7, #19]
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	d027      	beq.n	8001d66 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d26:	f7ff f941 	bl	8000fac <HAL_GetTick>
 8001d2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d2c:	e01b      	b.n	8001d66 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d2e:	f7ff f93d 	bl	8000fac <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b19      	cmp	r3, #25
 8001d3a:	d914      	bls.n	8001d66 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f043 0220 	orr.w	r2, r3, #32
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d1dc      	bne.n	8001d2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b20      	cmp	r3, #32
 8001d80:	d003      	beq.n	8001d8a <I2C_IsErrorOccurred+0xfa>
 8001d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d09d      	beq.n	8001cc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d103      	bne.n	8001d9a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2220      	movs	r2, #32
 8001d98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00b      	beq.n	8001df4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01c      	beq.n	8001e58 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7ff fe55 	bl	8001ace <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6859      	ldr	r1, [r3, #4]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <I2C_IsErrorOccurred+0x1d4>)
 8001e30:	400b      	ands	r3, r1
 8001e32:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3728      	adds	r7, #40	; 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	fe00e800 	.word	0xfe00e800

08001e68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	817b      	strh	r3, [r7, #10]
 8001e76:	4613      	mov	r3, r2
 8001e78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e7a:	897b      	ldrh	r3, [r7, #10]
 8001e7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e80:	7a7b      	ldrb	r3, [r7, #9]
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	0d5b      	lsrs	r3, r3, #21
 8001ea2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <I2C_TransferConfig+0x60>)
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	ea02 0103 	and.w	r1, r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001eba:	bf00      	nop
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	03ff63ff 	.word	0x03ff63ff

08001ecc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	d138      	bne.n	8001f54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e032      	b.n	8001f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	; 0x24
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6819      	ldr	r1, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e000      	b.n	8001f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
  }
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d139      	bne.n	8001fec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e033      	b.n	8001fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2224      	movs	r2, #36	; 0x24
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e000      	b.n	8001fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fec:	2302      	movs	r3, #2
  }
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <HAL_PWREx_GetVoltageRange+0x18>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40007000 	.word	0x40007000

08002018 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002026:	d130      	bne.n	800208a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002028:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002034:	d038      	beq.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002044:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2232      	movs	r2, #50	; 0x32
 800204c:	fb02 f303 	mul.w	r3, r2, r3
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0c9b      	lsrs	r3, r3, #18
 8002058:	3301      	adds	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800205c:	e002      	b.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3b01      	subs	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002070:	d102      	bne.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f2      	bne.n	800205e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002084:	d110      	bne.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e00f      	b.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002096:	d007      	beq.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020a0:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40007000 	.word	0x40007000
 80020bc:	20000008 	.word	0x20000008
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e3ca      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d6:	4b97      	ldr	r3, [pc, #604]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e0:	4b94      	ldr	r3, [pc, #592]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80e4 	beq.w	80022c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_RCC_OscConfig+0x4a>
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b0c      	cmp	r3, #12
 8002102:	f040 808b 	bne.w	800221c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b01      	cmp	r3, #1
 800210a:	f040 8087 	bne.w	800221c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800210e:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x62>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e3a2      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1a      	ldr	r2, [r3, #32]
 800212a:	4b82      	ldr	r3, [pc, #520]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <HAL_RCC_OscConfig+0x7c>
 8002136:	4b7f      	ldr	r3, [pc, #508]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213e:	e005      	b.n	800214c <HAL_RCC_OscConfig+0x88>
 8002140:	4b7c      	ldr	r3, [pc, #496]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800214c:	4293      	cmp	r3, r2
 800214e:	d223      	bcs.n	8002198 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fd1d 	bl	8002b94 <RCC_SetFlashLatencyFromMSIRange>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e383      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002164:	4b73      	ldr	r3, [pc, #460]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a72      	ldr	r2, [pc, #456]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800216a:	f043 0308 	orr.w	r3, r3, #8
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b70      	ldr	r3, [pc, #448]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	496d      	ldr	r1, [pc, #436]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002182:	4b6c      	ldr	r3, [pc, #432]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	4968      	ldr	r1, [pc, #416]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
 8002196:	e025      	b.n	80021e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002198:	4b66      	ldr	r3, [pc, #408]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a65      	ldr	r2, [pc, #404]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b63      	ldr	r3, [pc, #396]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4960      	ldr	r1, [pc, #384]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b6:	4b5f      	ldr	r3, [pc, #380]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	495b      	ldr	r1, [pc, #364]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d109      	bne.n	80021e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fcdd 	bl	8002b94 <RCC_SetFlashLatencyFromMSIRange>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e343      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e4:	f000 fc4a 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b52      	ldr	r3, [pc, #328]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	4950      	ldr	r1, [pc, #320]	; (8002338 <HAL_RCC_OscConfig+0x274>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	4a4e      	ldr	r2, [pc, #312]	; (800233c <HAL_RCC_OscConfig+0x278>)
 8002202:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002204:	4b4e      	ldr	r3, [pc, #312]	; (8002340 <HAL_RCC_OscConfig+0x27c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fe7f 	bl	8000f0c <HAL_InitTick>
 800220e:	4603      	mov	r3, r0
 8002210:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d052      	beq.n	80022be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	e327      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d032      	beq.n	800228a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002224:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a42      	ldr	r2, [pc, #264]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002230:	f7fe febc 	bl	8000fac <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002238:	f7fe feb8 	bl	8000fac <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e310      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800224a:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a36      	ldr	r2, [pc, #216]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b34      	ldr	r3, [pc, #208]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4931      	ldr	r1, [pc, #196]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002274:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	492c      	ldr	r1, [pc, #176]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
 8002288:	e01a      	b.n	80022c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800228a:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a29      	ldr	r2, [pc, #164]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002296:	f7fe fe89 	bl	8000fac <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800229e:	f7fe fe85 	bl	8000fac <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e2dd      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x1da>
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d074      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x21a>
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	d10e      	bne.n	80022f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d10b      	bne.n	80022f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d064      	beq.n	80023b4 <HAL_RCC_OscConfig+0x2f0>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d160      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e2ba      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x24a>
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e026      	b.n	800235c <HAL_RCC_OscConfig+0x298>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002316:	d115      	bne.n	8002344 <HAL_RCC_OscConfig+0x280>
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800231e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a02      	ldr	r2, [pc, #8]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	e014      	b.n	800235c <HAL_RCC_OscConfig+0x298>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	0800540c 	.word	0x0800540c
 800233c:	20000008 	.word	0x20000008
 8002340:	2000000c 	.word	0x2000000c
 8002344:	4ba0      	ldr	r3, [pc, #640]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a9f      	ldr	r2, [pc, #636]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 800234a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b9d      	ldr	r3, [pc, #628]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a9c      	ldr	r2, [pc, #624]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe fe22 	bl	8000fac <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236c:	f7fe fe1e 	bl	8000fac <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e276      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237e:	4b92      	ldr	r3, [pc, #584]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x2a8>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe fe0e 	bl	8000fac <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe fe0a 	bl	8000fac <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e262      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023a6:	4b88      	ldr	r3, [pc, #544]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x2d0>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d060      	beq.n	8002484 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_OscConfig+0x310>
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d119      	bne.n	8002402 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d116      	bne.n	8002402 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d4:	4b7c      	ldr	r3, [pc, #496]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_OscConfig+0x328>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e23f      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ec:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	061b      	lsls	r3, r3, #24
 80023fa:	4973      	ldr	r1, [pc, #460]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002400:	e040      	b.n	8002484 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d023      	beq.n	8002452 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240a:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7fe fdc9 	bl	8000fac <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241e:	f7fe fdc5 	bl	8000fac <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e21d      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002430:	4b65      	ldr	r3, [pc, #404]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b62      	ldr	r3, [pc, #392]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	495f      	ldr	r1, [pc, #380]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e018      	b.n	8002484 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002452:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a5c      	ldr	r2, [pc, #368]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800245c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fda5 	bl	8000fac <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002466:	f7fe fda1 	bl	8000fac <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1f9      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d03c      	beq.n	800250a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002498:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 800249a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249e:	4a4a      	ldr	r2, [pc, #296]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe fd80 	bl	8000fac <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe fd7c 	bl	8000fac <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1d4      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80024c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ef      	beq.n	80024b0 <HAL_RCC_OscConfig+0x3ec>
 80024d0:	e01b      	b.n	800250a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80024d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d8:	4a3b      	ldr	r2, [pc, #236]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7fe fd63 	bl	8000fac <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ea:	f7fe fd5f 	bl	8000fac <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e1b7      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024fc:	4b32      	ldr	r3, [pc, #200]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1ef      	bne.n	80024ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80a6 	beq.w	8002664 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10d      	bne.n	8002544 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	4a26      	ldr	r2, [pc, #152]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 800252e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002532:	6593      	str	r3, [r2, #88]	; 0x58
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002540:	2301      	movs	r3, #1
 8002542:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_RCC_OscConfig+0x508>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d118      	bne.n	8002582 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002550:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <HAL_RCC_OscConfig+0x508>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <HAL_RCC_OscConfig+0x508>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255c:	f7fe fd26 	bl	8000fac <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002564:	f7fe fd22 	bl	8000fac <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e17a      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_RCC_OscConfig+0x508>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d108      	bne.n	800259c <HAL_RCC_OscConfig+0x4d8>
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800259a:	e029      	b.n	80025f0 <HAL_RCC_OscConfig+0x52c>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d115      	bne.n	80025d0 <HAL_RCC_OscConfig+0x50c>
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ba:	4a03      	ldr	r2, [pc, #12]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0x52c>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
 80025d0:	4b9c      	ldr	r3, [pc, #624]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d6:	4a9b      	ldr	r2, [pc, #620]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e0:	4b98      	ldr	r3, [pc, #608]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	4a97      	ldr	r2, [pc, #604]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d016      	beq.n	8002626 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7fe fcd8 	bl	8000fac <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002600:	f7fe fcd4 	bl	8000fac <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e12a      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002616:	4b8b      	ldr	r3, [pc, #556]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ed      	beq.n	8002600 <HAL_RCC_OscConfig+0x53c>
 8002624:	e015      	b.n	8002652 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7fe fcc1 	bl	8000fac <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe fcbd 	bl	8000fac <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e113      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002644:	4b7f      	ldr	r3, [pc, #508]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ed      	bne.n	800262e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002652:	7ffb      	ldrb	r3, [r7, #31]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d105      	bne.n	8002664 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002658:	4b7a      	ldr	r3, [pc, #488]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a79      	ldr	r2, [pc, #484]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 800265e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002662:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80fe 	beq.w	800286a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	2b02      	cmp	r3, #2
 8002674:	f040 80d0 	bne.w	8002818 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002678:	4b72      	ldr	r3, [pc, #456]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	429a      	cmp	r2, r3
 800268a:	d130      	bne.n	80026ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	3b01      	subs	r3, #1
 8002698:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d127      	bne.n	80026ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d11f      	bne.n	80026ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026b8:	2a07      	cmp	r2, #7
 80026ba:	bf14      	ite	ne
 80026bc:	2201      	movne	r2, #1
 80026be:	2200      	moveq	r2, #0
 80026c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d113      	bne.n	80026ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	3b01      	subs	r3, #1
 80026d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d109      	bne.n	80026ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	3b01      	subs	r3, #1
 80026e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d06e      	beq.n	80027cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d069      	beq.n	80027c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026f4:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002700:	4b50      	ldr	r3, [pc, #320]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0ad      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a4b      	ldr	r2, [pc, #300]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 8002716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800271a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800271c:	f7fe fc46 	bl	8000fac <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe fc42 	bl	8000fac <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e09a      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002736:	4b43      	ldr	r3, [pc, #268]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002742:	4b40      	ldr	r3, [pc, #256]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	4b40      	ldr	r3, [pc, #256]	; (8002848 <HAL_RCC_OscConfig+0x784>)
 8002748:	4013      	ands	r3, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002752:	3a01      	subs	r2, #1
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	4311      	orrs	r1, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800275c:	0212      	lsls	r2, r2, #8
 800275e:	4311      	orrs	r1, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002764:	0852      	lsrs	r2, r2, #1
 8002766:	3a01      	subs	r2, #1
 8002768:	0552      	lsls	r2, r2, #21
 800276a:	4311      	orrs	r1, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002770:	0852      	lsrs	r2, r2, #1
 8002772:	3a01      	subs	r2, #1
 8002774:	0652      	lsls	r2, r2, #25
 8002776:	4311      	orrs	r1, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800277c:	0912      	lsrs	r2, r2, #4
 800277e:	0452      	lsls	r2, r2, #17
 8002780:	430a      	orrs	r2, r1
 8002782:	4930      	ldr	r1, [pc, #192]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 8002784:	4313      	orrs	r3, r2
 8002786:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002788:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2d      	ldr	r2, [pc, #180]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 800278e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002792:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002794:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 800279a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027a0:	f7fe fc04 	bl	8000fac <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe fc00 	bl	8000fac <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e058      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ba:	4b22      	ldr	r3, [pc, #136]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c6:	e050      	b.n	800286a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e04f      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d148      	bne.n	800286a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 80027de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a16      	ldr	r2, [pc, #88]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027f0:	f7fe fbdc 	bl	8000fac <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fbd8 	bl	8000fac <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e030      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x734>
 8002816:	e028      	b.n	800286a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d023      	beq.n	8002866 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <HAL_RCC_OscConfig+0x780>)
 8002824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7fe fbbf 	bl	8000fac <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	e00c      	b.n	800284c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe fbbb 	bl	8000fac <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d905      	bls.n	800284c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e013      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
 8002844:	40021000 	.word	0x40021000
 8002848:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_OscConfig+0x7b0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ec      	bne.n	8002832 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCC_OscConfig+0x7b0>)
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	4905      	ldr	r1, [pc, #20]	; (8002874 <HAL_RCC_OscConfig+0x7b0>)
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_OscConfig+0x7b4>)
 8002860:	4013      	ands	r3, r2
 8002862:	60cb      	str	r3, [r1, #12]
 8002864:	e001      	b.n	800286a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	feeefffc 	.word	0xfeeefffc

0800287c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0e7      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002890:	4b75      	ldr	r3, [pc, #468]	; (8002a68 <HAL_RCC_ClockConfig+0x1ec>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d910      	bls.n	80028c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b72      	ldr	r3, [pc, #456]	; (8002a68 <HAL_RCC_ClockConfig+0x1ec>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0207 	bic.w	r2, r3, #7
 80028a6:	4970      	ldr	r1, [pc, #448]	; (8002a68 <HAL_RCC_ClockConfig+0x1ec>)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b6e      	ldr	r3, [pc, #440]	; (8002a68 <HAL_RCC_ClockConfig+0x1ec>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0cf      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d010      	beq.n	80028ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	4b66      	ldr	r3, [pc, #408]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d8:	429a      	cmp	r2, r3
 80028da:	d908      	bls.n	80028ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b63      	ldr	r3, [pc, #396]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4960      	ldr	r1, [pc, #384]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d04c      	beq.n	8002994 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	4b5a      	ldr	r3, [pc, #360]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d121      	bne.n	8002952 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e0a6      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291a:	4b54      	ldr	r3, [pc, #336]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d115      	bne.n	8002952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e09a      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002932:	4b4e      	ldr	r3, [pc, #312]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e08e      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002942:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e086      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002952:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f023 0203 	bic.w	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4943      	ldr	r1, [pc, #268]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	4313      	orrs	r3, r2
 8002962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002964:	f7fe fb22 	bl	8000fac <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	e00a      	b.n	8002982 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296c:	f7fe fb1e 	bl	8000fac <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e06e      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 020c 	and.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	429a      	cmp	r2, r3
 8002992:	d1eb      	bne.n	800296c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d010      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d208      	bcs.n	80029c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	492b      	ldr	r1, [pc, #172]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c2:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_RCC_ClockConfig+0x1ec>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d210      	bcs.n	80029f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d0:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <HAL_RCC_ClockConfig+0x1ec>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 0207 	bic.w	r2, r3, #7
 80029d8:	4923      	ldr	r1, [pc, #140]	; (8002a68 <HAL_RCC_ClockConfig+0x1ec>)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_RCC_ClockConfig+0x1ec>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e036      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	4918      	ldr	r1, [pc, #96]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4910      	ldr	r1, [pc, #64]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a30:	f000 f824 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	490b      	ldr	r1, [pc, #44]	; (8002a70 <HAL_RCC_ClockConfig+0x1f4>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	4a09      	ldr	r2, [pc, #36]	; (8002a74 <HAL_RCC_ClockConfig+0x1f8>)
 8002a4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x1fc>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fa59 	bl	8000f0c <HAL_InitTick>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	0800540c 	.word	0x0800540c
 8002a74:	20000008 	.word	0x20000008
 8002a78:	2000000c 	.word	0x2000000c

08002a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a94:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d121      	bne.n	8002aee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d11e      	bne.n	8002aee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002abc:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e005      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002acc:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ad8:	4a2b      	ldr	r2, [pc, #172]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10d      	bne.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d102      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e004      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b00:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d134      	bne.n	8002b74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d003      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d003      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0xac>
 8002b20:	e005      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b24:	617b      	str	r3, [r7, #20]
      break;
 8002b26:	e005      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b2a:	617b      	str	r3, [r7, #20]
      break;
 8002b2c:	e002      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	617b      	str	r3, [r7, #20]
      break;
 8002b32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	3301      	adds	r3, #1
 8002b40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	fb03 f202 	mul.w	r2, r3, r2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	0e5b      	lsrs	r3, r3, #25
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	3301      	adds	r3, #1
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b74:	69bb      	ldr	r3, [r7, #24]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	0800541c 	.word	0x0800541c
 8002b8c:	00f42400 	.word	0x00f42400
 8002b90:	007a1200 	.word	0x007a1200

08002b94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ba0:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bac:	f7ff fa26 	bl	8001ffc <HAL_PWREx_GetVoltageRange>
 8002bb0:	6178      	str	r0, [r7, #20]
 8002bb2:	e014      	b.n	8002bde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	4a24      	ldr	r2, [pc, #144]	; (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002bc0:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bcc:	f7ff fa16 	bl	8001ffc <HAL_PWREx_GetVoltageRange>
 8002bd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be4:	d10b      	bne.n	8002bfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b80      	cmp	r3, #128	; 0x80
 8002bea:	d919      	bls.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2ba0      	cmp	r3, #160	; 0xa0
 8002bf0:	d902      	bls.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	e013      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	e010      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d902      	bls.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c04:	2303      	movs	r3, #3
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	e00a      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b80      	cmp	r3, #128	; 0x80
 8002c0e:	d102      	bne.n	8002c16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c10:	2302      	movs	r3, #2
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	e004      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b70      	cmp	r3, #112	; 0x70
 8002c1a:	d101      	bne.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 0207 	bic.w	r2, r3, #7
 8002c28:	4909      	ldr	r1, [pc, #36]	; (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40022000 	.word	0x40022000

08002c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c60:	2300      	movs	r3, #0
 8002c62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d041      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c78:	d02a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c7e:	d824      	bhi.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c84:	d008      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c8a:	d81e      	bhi.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c94:	d010      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c96:	e018      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c98:	4b86      	ldr	r3, [pc, #536]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a85      	ldr	r2, [pc, #532]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ca4:	e015      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fabb 	bl	8003228 <RCCEx_PLLSAI1_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cb6:	e00c      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3320      	adds	r3, #32
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fba6 	bl	8003410 <RCCEx_PLLSAI2_Config>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cc8:	e003      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	74fb      	strb	r3, [r7, #19]
      break;
 8002cce:	e000      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cd8:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce6:	4973      	ldr	r1, [pc, #460]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cee:	e001      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d041      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d08:	d02a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d0e:	d824      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d14:	d008      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d1a:	d81e      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d24:	d010      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d26:	e018      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d28:	4b62      	ldr	r3, [pc, #392]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a61      	ldr	r2, [pc, #388]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d34:	e015      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fa73 	bl	8003228 <RCCEx_PLLSAI1_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d46:	e00c      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3320      	adds	r3, #32
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fb5e 	bl	8003410 <RCCEx_PLLSAI2_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d58:	e003      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d5e:	e000      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d68:	4b52      	ldr	r3, [pc, #328]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d76:	494f      	ldr	r1, [pc, #316]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d7e:	e001      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80a0 	beq.w	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dac:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	4a40      	ldr	r2, [pc, #256]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db6:	6593      	str	r3, [r2, #88]	; 0x58
 8002db8:	4b3e      	ldr	r3, [pc, #248]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc8:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a3a      	ldr	r2, [pc, #232]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dd4:	f7fe f8ea 	bl	8000fac <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dda:	e009      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fe f8e6 	bl	8000fac <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d902      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	74fb      	strb	r3, [r7, #19]
        break;
 8002dee:	e005      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002df0:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ef      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d15c      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01f      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d019      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e20:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7fe f8a5 	bl	8000fac <HAL_GetTick>
 8002e62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e64:	e00b      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7fe f8a1 	bl	8000fac <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d902      	bls.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	74fb      	strb	r3, [r7, #19]
            break;
 8002e7c:	e006      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ec      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10c      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea2:	4904      	ldr	r1, [pc, #16]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002eaa:	e009      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	74bb      	strb	r3, [r7, #18]
 8002eb0:	e006      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
 8002ebe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec0:	7c7b      	ldrb	r3, [r7, #17]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d105      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec6:	4b9e      	ldr	r3, [pc, #632]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eca:	4a9d      	ldr	r2, [pc, #628]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ede:	4b98      	ldr	r3, [pc, #608]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee4:	f023 0203 	bic.w	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	4994      	ldr	r1, [pc, #592]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f00:	4b8f      	ldr	r3, [pc, #572]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f023 020c 	bic.w	r2, r3, #12
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0e:	498c      	ldr	r1, [pc, #560]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f22:	4b87      	ldr	r3, [pc, #540]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	4983      	ldr	r1, [pc, #524]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f44:	4b7e      	ldr	r3, [pc, #504]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	497b      	ldr	r1, [pc, #492]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f66:	4b76      	ldr	r3, [pc, #472]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	4972      	ldr	r1, [pc, #456]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f88:	4b6d      	ldr	r3, [pc, #436]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	496a      	ldr	r1, [pc, #424]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002faa:	4b65      	ldr	r3, [pc, #404]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	4961      	ldr	r1, [pc, #388]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fcc:	4b5c      	ldr	r3, [pc, #368]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fda:	4959      	ldr	r1, [pc, #356]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fee:	4b54      	ldr	r3, [pc, #336]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffc:	4950      	ldr	r1, [pc, #320]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003010:	4b4b      	ldr	r3, [pc, #300]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	4948      	ldr	r1, [pc, #288]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003032:	4b43      	ldr	r3, [pc, #268]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	493f      	ldr	r1, [pc, #252]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d028      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003054:	4b3a      	ldr	r3, [pc, #232]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003062:	4937      	ldr	r1, [pc, #220]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800306e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003072:	d106      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003074:	4b32      	ldr	r3, [pc, #200]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a31      	ldr	r2, [pc, #196]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800307e:	60d3      	str	r3, [r2, #12]
 8003080:	e011      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800308a:	d10c      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	2101      	movs	r1, #1
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f8c8 	bl	8003228 <RCCEx_PLLSAI1_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d028      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030b2:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	491f      	ldr	r1, [pc, #124]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030dc:	60d3      	str	r3, [r2, #12]
 80030de:	e011      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 f899 	bl	8003228 <RCCEx_PLLSAI1_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d02b      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311e:	4908      	ldr	r1, [pc, #32]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800312e:	d109      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a02      	ldr	r2, [pc, #8]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313a:	60d3      	str	r3, [r2, #12]
 800313c:	e014      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314c:	d10c      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3304      	adds	r3, #4
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f867 	bl	8003228 <RCCEx_PLLSAI1_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02f      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003174:	4b2b      	ldr	r3, [pc, #172]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003182:	4928      	ldr	r1, [pc, #160]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800318e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003192:	d10d      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	2102      	movs	r1, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f844 	bl	8003228 <RCCEx_PLLSAI1_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d014      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	74bb      	strb	r3, [r7, #18]
 80031ae:	e011      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3320      	adds	r3, #32
 80031be:	2102      	movs	r1, #2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 f925 	bl	8003410 <RCCEx_PLLSAI2_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ee:	490d      	ldr	r1, [pc, #52]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003212:	4904      	ldr	r1, [pc, #16]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800321a:	7cbb      	ldrb	r3, [r7, #18]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000

08003228 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003236:	4b75      	ldr	r3, [pc, #468]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d018      	beq.n	8003274 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003242:	4b72      	ldr	r3, [pc, #456]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0203 	and.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d10d      	bne.n	800326e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
       ||
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800325a:	4b6c      	ldr	r3, [pc, #432]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
       ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d047      	beq.n	80032fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
 8003272:	e044      	b.n	80032fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d018      	beq.n	80032ae <RCCEx_PLLSAI1_Config+0x86>
 800327c:	2b03      	cmp	r3, #3
 800327e:	d825      	bhi.n	80032cc <RCCEx_PLLSAI1_Config+0xa4>
 8003280:	2b01      	cmp	r3, #1
 8003282:	d002      	beq.n	800328a <RCCEx_PLLSAI1_Config+0x62>
 8003284:	2b02      	cmp	r3, #2
 8003286:	d009      	beq.n	800329c <RCCEx_PLLSAI1_Config+0x74>
 8003288:	e020      	b.n	80032cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800328a:	4b60      	ldr	r3, [pc, #384]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11d      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329a:	e01a      	b.n	80032d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800329c:	4b5b      	ldr	r3, [pc, #364]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d116      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ac:	e013      	b.n	80032d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ae:	4b57      	ldr	r3, [pc, #348]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032ba:	4b54      	ldr	r3, [pc, #336]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032ca:	e006      	b.n	80032da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
      break;
 80032d0:	e004      	b.n	80032dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032d2:	bf00      	nop
 80032d4:	e002      	b.n	80032dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032da:	bf00      	nop
    }

    if(status == HAL_OK)
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10d      	bne.n	80032fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032e2:	4b4a      	ldr	r3, [pc, #296]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6819      	ldr	r1, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	430b      	orrs	r3, r1
 80032f8:	4944      	ldr	r1, [pc, #272]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d17d      	bne.n	8003400 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003304:	4b41      	ldr	r3, [pc, #260]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a40      	ldr	r2, [pc, #256]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 800330a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800330e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003310:	f7fd fe4c 	bl	8000fac <HAL_GetTick>
 8003314:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003316:	e009      	b.n	800332c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003318:	f7fd fe48 	bl	8000fac <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d902      	bls.n	800332c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	73fb      	strb	r3, [r7, #15]
        break;
 800332a:	e005      	b.n	8003338 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800332c:	4b37      	ldr	r3, [pc, #220]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ef      	bne.n	8003318 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d160      	bne.n	8003400 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d111      	bne.n	8003368 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003344:	4b31      	ldr	r3, [pc, #196]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6892      	ldr	r2, [r2, #8]
 8003354:	0211      	lsls	r1, r2, #8
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68d2      	ldr	r2, [r2, #12]
 800335a:	0912      	lsrs	r2, r2, #4
 800335c:	0452      	lsls	r2, r2, #17
 800335e:	430a      	orrs	r2, r1
 8003360:	492a      	ldr	r1, [pc, #168]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	610b      	str	r3, [r1, #16]
 8003366:	e027      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d112      	bne.n	8003394 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800336e:	4b27      	ldr	r3, [pc, #156]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003376:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6892      	ldr	r2, [r2, #8]
 800337e:	0211      	lsls	r1, r2, #8
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6912      	ldr	r2, [r2, #16]
 8003384:	0852      	lsrs	r2, r2, #1
 8003386:	3a01      	subs	r2, #1
 8003388:	0552      	lsls	r2, r2, #21
 800338a:	430a      	orrs	r2, r1
 800338c:	491f      	ldr	r1, [pc, #124]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	610b      	str	r3, [r1, #16]
 8003392:	e011      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800339c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6892      	ldr	r2, [r2, #8]
 80033a4:	0211      	lsls	r1, r2, #8
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6952      	ldr	r2, [r2, #20]
 80033aa:	0852      	lsrs	r2, r2, #1
 80033ac:	3a01      	subs	r2, #1
 80033ae:	0652      	lsls	r2, r2, #25
 80033b0:	430a      	orrs	r2, r1
 80033b2:	4916      	ldr	r1, [pc, #88]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033b8:	4b14      	ldr	r3, [pc, #80]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a13      	ldr	r2, [pc, #76]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fd fdf2 	bl	8000fac <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033ca:	e009      	b.n	80033e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033cc:	f7fd fdee 	bl	8000fac <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d902      	bls.n	80033e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	73fb      	strb	r3, [r7, #15]
          break;
 80033de:	e005      	b.n	80033ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ef      	beq.n	80033cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	4904      	ldr	r1, [pc, #16]	; (800340c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000

08003410 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800341e:	4b6a      	ldr	r3, [pc, #424]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d018      	beq.n	800345c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800342a:	4b67      	ldr	r3, [pc, #412]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0203 	and.w	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d10d      	bne.n	8003456 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
       ||
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003442:	4b61      	ldr	r3, [pc, #388]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
       ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d047      	beq.n	80034e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
 800345a:	e044      	b.n	80034e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d018      	beq.n	8003496 <RCCEx_PLLSAI2_Config+0x86>
 8003464:	2b03      	cmp	r3, #3
 8003466:	d825      	bhi.n	80034b4 <RCCEx_PLLSAI2_Config+0xa4>
 8003468:	2b01      	cmp	r3, #1
 800346a:	d002      	beq.n	8003472 <RCCEx_PLLSAI2_Config+0x62>
 800346c:	2b02      	cmp	r3, #2
 800346e:	d009      	beq.n	8003484 <RCCEx_PLLSAI2_Config+0x74>
 8003470:	e020      	b.n	80034b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003472:	4b55      	ldr	r3, [pc, #340]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d11d      	bne.n	80034ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003482:	e01a      	b.n	80034ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003484:	4b50      	ldr	r3, [pc, #320]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d116      	bne.n	80034be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003494:	e013      	b.n	80034be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003496:	4b4c      	ldr	r3, [pc, #304]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034a2:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034b2:	e006      	b.n	80034c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
      break;
 80034b8:	e004      	b.n	80034c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034ba:	bf00      	nop
 80034bc:	e002      	b.n	80034c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10d      	bne.n	80034e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ca:	4b3f      	ldr	r3, [pc, #252]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6819      	ldr	r1, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	430b      	orrs	r3, r1
 80034e0:	4939      	ldr	r1, [pc, #228]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d167      	bne.n	80035bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034ec:	4b36      	ldr	r3, [pc, #216]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a35      	ldr	r2, [pc, #212]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f8:	f7fd fd58 	bl	8000fac <HAL_GetTick>
 80034fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034fe:	e009      	b.n	8003514 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003500:	f7fd fd54 	bl	8000fac <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d902      	bls.n	8003514 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	73fb      	strb	r3, [r7, #15]
        break;
 8003512:	e005      	b.n	8003520 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003514:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ef      	bne.n	8003500 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d14a      	bne.n	80035bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d111      	bne.n	8003550 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800352c:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6892      	ldr	r2, [r2, #8]
 800353c:	0211      	lsls	r1, r2, #8
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68d2      	ldr	r2, [r2, #12]
 8003542:	0912      	lsrs	r2, r2, #4
 8003544:	0452      	lsls	r2, r2, #17
 8003546:	430a      	orrs	r2, r1
 8003548:	491f      	ldr	r1, [pc, #124]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800354a:	4313      	orrs	r3, r2
 800354c:	614b      	str	r3, [r1, #20]
 800354e:	e011      	b.n	8003574 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003550:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003558:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6892      	ldr	r2, [r2, #8]
 8003560:	0211      	lsls	r1, r2, #8
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6912      	ldr	r2, [r2, #16]
 8003566:	0852      	lsrs	r2, r2, #1
 8003568:	3a01      	subs	r2, #1
 800356a:	0652      	lsls	r2, r2, #25
 800356c:	430a      	orrs	r2, r1
 800356e:	4916      	ldr	r1, [pc, #88]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003570:	4313      	orrs	r3, r2
 8003572:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fd fd14 	bl	8000fac <HAL_GetTick>
 8003584:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003586:	e009      	b.n	800359c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003588:	f7fd fd10 	bl	8000fac <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d902      	bls.n	800359c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	73fb      	strb	r3, [r7, #15]
          break;
 800359a:	e005      	b.n	80035a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ef      	beq.n	8003588 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4904      	ldr	r1, [pc, #16]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000

080035cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d06c      	beq.n	80036b8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd fb66 	bl	8000cc4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	22ca      	movs	r2, #202	; 0xca
 8003606:	625a      	str	r2, [r3, #36]	; 0x24
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2253      	movs	r2, #83	; 0x53
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fa49 	bl	8003aa8 <RTC_EnterInitMode>
 8003616:	4603      	mov	r3, r0
 8003618:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d14b      	bne.n	80036b8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800362e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003632:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6899      	ldr	r1, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68d2      	ldr	r2, [r2, #12]
 800365a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6919      	ldr	r1, [r3, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	041a      	lsls	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fa4d 	bl	8003b10 <RTC_ExitInitMode>
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11b      	bne.n	80036b8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0203 	bic.w	r2, r2, #3
 800368e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69da      	ldr	r2, [r3, #28]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	22ff      	movs	r2, #255	; 0xff
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036c2:	b590      	push	{r4, r7, lr}
 80036c4:	b087      	sub	sp, #28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_RTC_SetTime+0x1a>
 80036d8:	2302      	movs	r3, #2
 80036da:	e08b      	b.n	80037f4 <HAL_RTC_SetTime+0x132>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	22ca      	movs	r2, #202	; 0xca
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2253      	movs	r2, #83	; 0x53
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f9d3 	bl	8003aa8 <RTC_EnterInitMode>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d163      	bne.n	80037d4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d126      	bne.n	8003760 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2200      	movs	r2, #0
 8003724:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fa2e 	bl	8003b8c <RTC_ByteToBcd2>
 8003730:	4603      	mov	r3, r0
 8003732:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	785b      	ldrb	r3, [r3, #1]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fa27 	bl	8003b8c <RTC_ByteToBcd2>
 800373e:	4603      	mov	r3, r0
 8003740:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003742:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	789b      	ldrb	r3, [r3, #2]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fa1f 	bl	8003b8c <RTC_ByteToBcd2>
 800374e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003750:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	78db      	ldrb	r3, [r3, #3]
 8003758:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e018      	b.n	8003792 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2200      	movs	r2, #0
 8003772:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003780:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003786:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	78db      	ldrb	r3, [r3, #3]
 800378c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800379c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037a0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6899      	ldr	r1, [r3, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f9a0 	bl	8003b10 <RTC_ExitInitMode>
 80037d0:	4603      	mov	r3, r0
 80037d2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	22ff      	movs	r2, #255	; 0xff
 80037da:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd90      	pop	{r4, r7, pc}

080037fc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800382a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800382e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	0c1b      	lsrs	r3, r3, #16
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383a:	b2da      	uxtb	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	0d9b      	lsrs	r3, r3, #22
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d11a      	bne.n	80038aa <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f9a7 	bl	8003bcc <RTC_Bcd2ToByte>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f99e 	bl	8003bcc <RTC_Bcd2ToByte>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	789b      	ldrb	r3, [r3, #2]
 800389c:	4618      	mov	r0, r3
 800389e:	f000 f995 	bl	8003bcc <RTC_Bcd2ToByte>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_RTC_SetDate+0x1a>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e075      	b.n	80039ba <HAL_RTC_SetDate+0x106>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10e      	bne.n	8003902 <HAL_RTC_SetDate+0x4e>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	785b      	ldrb	r3, [r3, #1]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	f023 0310 	bic.w	r3, r3, #16
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	330a      	adds	r3, #10
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d11c      	bne.n	8003942 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	78db      	ldrb	r3, [r3, #3]
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f93d 	bl	8003b8c <RTC_ByteToBcd2>
 8003912:	4603      	mov	r3, r0
 8003914:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 f936 	bl	8003b8c <RTC_ByteToBcd2>
 8003920:	4603      	mov	r3, r0
 8003922:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003924:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	789b      	ldrb	r3, [r3, #2]
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f92e 	bl	8003b8c <RTC_ByteToBcd2>
 8003930:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003932:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	e00e      	b.n	8003960 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	78db      	ldrb	r3, [r3, #3]
 8003946:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	785b      	ldrb	r3, [r3, #1]
 800394c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800394e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003954:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	22ca      	movs	r2, #202	; 0xca
 8003966:	625a      	str	r2, [r3, #36]	; 0x24
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2253      	movs	r2, #83	; 0x53
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f899 	bl	8003aa8 <RTC_EnterInitMode>
 8003976:	4603      	mov	r3, r0
 8003978:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10c      	bne.n	800399a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800398a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800398e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f8bd 	bl	8003b10 <RTC_ExitInitMode>
 8003996:	4603      	mov	r3, r0
 8003998:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	22ff      	movs	r2, #255	; 0xff
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d103      	bne.n	80039b0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd90      	pop	{r4, r7, pc}

080039c2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b086      	sub	sp, #24
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	0b5b      	lsrs	r3, r3, #13
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11a      	bne.n	8003a52 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	78db      	ldrb	r3, [r3, #3]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f8d3 	bl	8003bcc <RTC_Bcd2ToByte>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f8ca 	bl	8003bcc <RTC_Bcd2ToByte>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	789b      	ldrb	r3, [r3, #2]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f8c1 	bl	8003bcc <RTC_Bcd2ToByte>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a72:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003a74:	f7fd fa9a 	bl	8000fac <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a7a:	e009      	b.n	8003a90 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a7c:	f7fd fa96 	bl	8000fac <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a8a:	d901      	bls.n	8003a90 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e007      	b.n	8003aa0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0ee      	beq.n	8003a7c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d120      	bne.n	8003b04 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003acc:	f7fd fa6e 	bl	8000fac <HAL_GetTick>
 8003ad0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ad2:	e00d      	b.n	8003af0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ad4:	f7fd fa6a 	bl	8000fac <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ae2:	d905      	bls.n	8003af0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2203      	movs	r2, #3
 8003aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <RTC_EnterInitMode+0x5c>
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d1e7      	bne.n	8003ad4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <RTC_ExitInitMode+0x78>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a19      	ldr	r2, [pc, #100]	; (8003b88 <RTC_ExitInitMode+0x78>)
 8003b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b26:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003b28:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <RTC_ExitInitMode+0x78>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10c      	bne.n	8003b4e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff91 	bl	8003a5c <HAL_RTC_WaitForSynchro>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01e      	beq.n	8003b7e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2203      	movs	r2, #3
 8003b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	73fb      	strb	r3, [r7, #15]
 8003b4c:	e017      	b.n	8003b7e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <RTC_ExitInitMode+0x78>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	4a0d      	ldr	r2, [pc, #52]	; (8003b88 <RTC_ExitInitMode+0x78>)
 8003b54:	f023 0320 	bic.w	r3, r3, #32
 8003b58:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ff7e 	bl	8003a5c <HAL_RTC_WaitForSynchro>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2203      	movs	r2, #3
 8003b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <RTC_ExitInitMode+0x78>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	4a04      	ldr	r2, [pc, #16]	; (8003b88 <RTC_ExitInitMode+0x78>)
 8003b78:	f043 0320 	orr.w	r3, r3, #32
 8003b7c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40002800 	.word	0x40002800

08003b8c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003b9e:	e005      	b.n	8003bac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003ba6:	7afb      	ldrb	r3, [r7, #11]
 8003ba8:	3b0a      	subs	r3, #10
 8003baa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003bac:	7afb      	ldrb	r3, [r7, #11]
 8003bae:	2b09      	cmp	r3, #9
 8003bb0:	d8f6      	bhi.n	8003ba0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	7afb      	ldrb	r3, [r7, #11]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	b2db      	uxtb	r3, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b2db      	uxtb	r3, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_RTCEx_SetTimeStamp>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_RTCEx_SetTimeStamp+0x1a>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e034      	b.n	8003c84 <HAL_RTCEx_SetTimeStamp+0x84>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c34:	f023 0308 	bic.w	r3, r3, #8
 8003c38:	617b      	str	r3, [r7, #20]

  tmpreg |= TimeStampEdge;
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	22ca      	movs	r2, #202	; 0xca
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2253      	movs	r2, #83	; 0x53
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c68:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	22ff      	movs	r2, #255	; 0xff
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RTCEx_SetRefClock+0x16>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e034      	b.n	8003d10 <HAL_RTCEx_SetRefClock+0x80>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	22ca      	movs	r2, #202	; 0xca
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2253      	movs	r2, #83	; 0x53
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff feee 	bl	8003aa8 <RTC_EnterInitMode>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0210 	orr.w	r2, r2, #16
 8003ce4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ff12 	bl	8003b10 <RTC_ExitInitMode>
 8003cec:	4603      	mov	r3, r0
 8003cee:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <__errno>:
 8003d18:	4b01      	ldr	r3, [pc, #4]	; (8003d20 <__errno+0x8>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000014 	.word	0x20000014

08003d24 <__libc_init_array>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	4d0d      	ldr	r5, [pc, #52]	; (8003d5c <__libc_init_array+0x38>)
 8003d28:	4c0d      	ldr	r4, [pc, #52]	; (8003d60 <__libc_init_array+0x3c>)
 8003d2a:	1b64      	subs	r4, r4, r5
 8003d2c:	10a4      	asrs	r4, r4, #2
 8003d2e:	2600      	movs	r6, #0
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	d109      	bne.n	8003d48 <__libc_init_array+0x24>
 8003d34:	4d0b      	ldr	r5, [pc, #44]	; (8003d64 <__libc_init_array+0x40>)
 8003d36:	4c0c      	ldr	r4, [pc, #48]	; (8003d68 <__libc_init_array+0x44>)
 8003d38:	f000 fc8e 	bl	8004658 <_init>
 8003d3c:	1b64      	subs	r4, r4, r5
 8003d3e:	10a4      	asrs	r4, r4, #2
 8003d40:	2600      	movs	r6, #0
 8003d42:	42a6      	cmp	r6, r4
 8003d44:	d105      	bne.n	8003d52 <__libc_init_array+0x2e>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4c:	4798      	blx	r3
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7ee      	b.n	8003d30 <__libc_init_array+0xc>
 8003d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d56:	4798      	blx	r3
 8003d58:	3601      	adds	r6, #1
 8003d5a:	e7f2      	b.n	8003d42 <__libc_init_array+0x1e>
 8003d5c:	08005480 	.word	0x08005480
 8003d60:	08005480 	.word	0x08005480
 8003d64:	08005480 	.word	0x08005480
 8003d68:	08005484 	.word	0x08005484

08003d6c <memset>:
 8003d6c:	4402      	add	r2, r0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d100      	bne.n	8003d76 <memset+0xa>
 8003d74:	4770      	bx	lr
 8003d76:	f803 1b01 	strb.w	r1, [r3], #1
 8003d7a:	e7f9      	b.n	8003d70 <memset+0x4>

08003d7c <siprintf>:
 8003d7c:	b40e      	push	{r1, r2, r3}
 8003d7e:	b500      	push	{lr}
 8003d80:	b09c      	sub	sp, #112	; 0x70
 8003d82:	ab1d      	add	r3, sp, #116	; 0x74
 8003d84:	9002      	str	r0, [sp, #8]
 8003d86:	9006      	str	r0, [sp, #24]
 8003d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d8c:	4809      	ldr	r0, [pc, #36]	; (8003db4 <siprintf+0x38>)
 8003d8e:	9107      	str	r1, [sp, #28]
 8003d90:	9104      	str	r1, [sp, #16]
 8003d92:	4909      	ldr	r1, [pc, #36]	; (8003db8 <siprintf+0x3c>)
 8003d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d98:	9105      	str	r1, [sp, #20]
 8003d9a:	6800      	ldr	r0, [r0, #0]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	a902      	add	r1, sp, #8
 8003da0:	f000 f868 	bl	8003e74 <_svfiprintf_r>
 8003da4:	9b02      	ldr	r3, [sp, #8]
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	b01c      	add	sp, #112	; 0x70
 8003dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db0:	b003      	add	sp, #12
 8003db2:	4770      	bx	lr
 8003db4:	20000014 	.word	0x20000014
 8003db8:	ffff0208 	.word	0xffff0208

08003dbc <__ssputs_r>:
 8003dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc0:	688e      	ldr	r6, [r1, #8]
 8003dc2:	429e      	cmp	r6, r3
 8003dc4:	4682      	mov	sl, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	4690      	mov	r8, r2
 8003dca:	461f      	mov	r7, r3
 8003dcc:	d838      	bhi.n	8003e40 <__ssputs_r+0x84>
 8003dce:	898a      	ldrh	r2, [r1, #12]
 8003dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dd4:	d032      	beq.n	8003e3c <__ssputs_r+0x80>
 8003dd6:	6825      	ldr	r5, [r4, #0]
 8003dd8:	6909      	ldr	r1, [r1, #16]
 8003dda:	eba5 0901 	sub.w	r9, r5, r1
 8003dde:	6965      	ldr	r5, [r4, #20]
 8003de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003de8:	3301      	adds	r3, #1
 8003dea:	444b      	add	r3, r9
 8003dec:	106d      	asrs	r5, r5, #1
 8003dee:	429d      	cmp	r5, r3
 8003df0:	bf38      	it	cc
 8003df2:	461d      	movcc	r5, r3
 8003df4:	0553      	lsls	r3, r2, #21
 8003df6:	d531      	bpl.n	8003e5c <__ssputs_r+0xa0>
 8003df8:	4629      	mov	r1, r5
 8003dfa:	f000 fb63 	bl	80044c4 <_malloc_r>
 8003dfe:	4606      	mov	r6, r0
 8003e00:	b950      	cbnz	r0, 8003e18 <__ssputs_r+0x5c>
 8003e02:	230c      	movs	r3, #12
 8003e04:	f8ca 3000 	str.w	r3, [sl]
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e0e:	81a3      	strh	r3, [r4, #12]
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e18:	6921      	ldr	r1, [r4, #16]
 8003e1a:	464a      	mov	r2, r9
 8003e1c:	f000 fabe 	bl	800439c <memcpy>
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	6126      	str	r6, [r4, #16]
 8003e2e:	6165      	str	r5, [r4, #20]
 8003e30:	444e      	add	r6, r9
 8003e32:	eba5 0509 	sub.w	r5, r5, r9
 8003e36:	6026      	str	r6, [r4, #0]
 8003e38:	60a5      	str	r5, [r4, #8]
 8003e3a:	463e      	mov	r6, r7
 8003e3c:	42be      	cmp	r6, r7
 8003e3e:	d900      	bls.n	8003e42 <__ssputs_r+0x86>
 8003e40:	463e      	mov	r6, r7
 8003e42:	6820      	ldr	r0, [r4, #0]
 8003e44:	4632      	mov	r2, r6
 8003e46:	4641      	mov	r1, r8
 8003e48:	f000 fab6 	bl	80043b8 <memmove>
 8003e4c:	68a3      	ldr	r3, [r4, #8]
 8003e4e:	1b9b      	subs	r3, r3, r6
 8003e50:	60a3      	str	r3, [r4, #8]
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	4433      	add	r3, r6
 8003e56:	6023      	str	r3, [r4, #0]
 8003e58:	2000      	movs	r0, #0
 8003e5a:	e7db      	b.n	8003e14 <__ssputs_r+0x58>
 8003e5c:	462a      	mov	r2, r5
 8003e5e:	f000 fba5 	bl	80045ac <_realloc_r>
 8003e62:	4606      	mov	r6, r0
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d1e1      	bne.n	8003e2c <__ssputs_r+0x70>
 8003e68:	6921      	ldr	r1, [r4, #16]
 8003e6a:	4650      	mov	r0, sl
 8003e6c:	f000 fabe 	bl	80043ec <_free_r>
 8003e70:	e7c7      	b.n	8003e02 <__ssputs_r+0x46>
	...

08003e74 <_svfiprintf_r>:
 8003e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e78:	4698      	mov	r8, r3
 8003e7a:	898b      	ldrh	r3, [r1, #12]
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	b09d      	sub	sp, #116	; 0x74
 8003e80:	4607      	mov	r7, r0
 8003e82:	460d      	mov	r5, r1
 8003e84:	4614      	mov	r4, r2
 8003e86:	d50e      	bpl.n	8003ea6 <_svfiprintf_r+0x32>
 8003e88:	690b      	ldr	r3, [r1, #16]
 8003e8a:	b963      	cbnz	r3, 8003ea6 <_svfiprintf_r+0x32>
 8003e8c:	2140      	movs	r1, #64	; 0x40
 8003e8e:	f000 fb19 	bl	80044c4 <_malloc_r>
 8003e92:	6028      	str	r0, [r5, #0]
 8003e94:	6128      	str	r0, [r5, #16]
 8003e96:	b920      	cbnz	r0, 8003ea2 <_svfiprintf_r+0x2e>
 8003e98:	230c      	movs	r3, #12
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	e0d1      	b.n	8004046 <_svfiprintf_r+0x1d2>
 8003ea2:	2340      	movs	r3, #64	; 0x40
 8003ea4:	616b      	str	r3, [r5, #20]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eaa:	2320      	movs	r3, #32
 8003eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eb4:	2330      	movs	r3, #48	; 0x30
 8003eb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004060 <_svfiprintf_r+0x1ec>
 8003eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ebe:	f04f 0901 	mov.w	r9, #1
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	469a      	mov	sl, r3
 8003ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eca:	b10a      	cbz	r2, 8003ed0 <_svfiprintf_r+0x5c>
 8003ecc:	2a25      	cmp	r2, #37	; 0x25
 8003ece:	d1f9      	bne.n	8003ec4 <_svfiprintf_r+0x50>
 8003ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ed4:	d00b      	beq.n	8003eee <_svfiprintf_r+0x7a>
 8003ed6:	465b      	mov	r3, fp
 8003ed8:	4622      	mov	r2, r4
 8003eda:	4629      	mov	r1, r5
 8003edc:	4638      	mov	r0, r7
 8003ede:	f7ff ff6d 	bl	8003dbc <__ssputs_r>
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	f000 80aa 	beq.w	800403c <_svfiprintf_r+0x1c8>
 8003ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eea:	445a      	add	r2, fp
 8003eec:	9209      	str	r2, [sp, #36]	; 0x24
 8003eee:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80a2 	beq.w	800403c <_svfiprintf_r+0x1c8>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f04f 32ff 	mov.w	r2, #4294967295
 8003efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f02:	f10a 0a01 	add.w	sl, sl, #1
 8003f06:	9304      	str	r3, [sp, #16]
 8003f08:	9307      	str	r3, [sp, #28]
 8003f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8003f10:	4654      	mov	r4, sl
 8003f12:	2205      	movs	r2, #5
 8003f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f18:	4851      	ldr	r0, [pc, #324]	; (8004060 <_svfiprintf_r+0x1ec>)
 8003f1a:	f7fc f959 	bl	80001d0 <memchr>
 8003f1e:	9a04      	ldr	r2, [sp, #16]
 8003f20:	b9d8      	cbnz	r0, 8003f5a <_svfiprintf_r+0xe6>
 8003f22:	06d0      	lsls	r0, r2, #27
 8003f24:	bf44      	itt	mi
 8003f26:	2320      	movmi	r3, #32
 8003f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f2c:	0711      	lsls	r1, r2, #28
 8003f2e:	bf44      	itt	mi
 8003f30:	232b      	movmi	r3, #43	; 0x2b
 8003f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f36:	f89a 3000 	ldrb.w	r3, [sl]
 8003f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f3c:	d015      	beq.n	8003f6a <_svfiprintf_r+0xf6>
 8003f3e:	9a07      	ldr	r2, [sp, #28]
 8003f40:	4654      	mov	r4, sl
 8003f42:	2000      	movs	r0, #0
 8003f44:	f04f 0c0a 	mov.w	ip, #10
 8003f48:	4621      	mov	r1, r4
 8003f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f4e:	3b30      	subs	r3, #48	; 0x30
 8003f50:	2b09      	cmp	r3, #9
 8003f52:	d94e      	bls.n	8003ff2 <_svfiprintf_r+0x17e>
 8003f54:	b1b0      	cbz	r0, 8003f84 <_svfiprintf_r+0x110>
 8003f56:	9207      	str	r2, [sp, #28]
 8003f58:	e014      	b.n	8003f84 <_svfiprintf_r+0x110>
 8003f5a:	eba0 0308 	sub.w	r3, r0, r8
 8003f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f62:	4313      	orrs	r3, r2
 8003f64:	9304      	str	r3, [sp, #16]
 8003f66:	46a2      	mov	sl, r4
 8003f68:	e7d2      	b.n	8003f10 <_svfiprintf_r+0x9c>
 8003f6a:	9b03      	ldr	r3, [sp, #12]
 8003f6c:	1d19      	adds	r1, r3, #4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	9103      	str	r1, [sp, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bfbb      	ittet	lt
 8003f76:	425b      	neglt	r3, r3
 8003f78:	f042 0202 	orrlt.w	r2, r2, #2
 8003f7c:	9307      	strge	r3, [sp, #28]
 8003f7e:	9307      	strlt	r3, [sp, #28]
 8003f80:	bfb8      	it	lt
 8003f82:	9204      	strlt	r2, [sp, #16]
 8003f84:	7823      	ldrb	r3, [r4, #0]
 8003f86:	2b2e      	cmp	r3, #46	; 0x2e
 8003f88:	d10c      	bne.n	8003fa4 <_svfiprintf_r+0x130>
 8003f8a:	7863      	ldrb	r3, [r4, #1]
 8003f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f8e:	d135      	bne.n	8003ffc <_svfiprintf_r+0x188>
 8003f90:	9b03      	ldr	r3, [sp, #12]
 8003f92:	1d1a      	adds	r2, r3, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	9203      	str	r2, [sp, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bfb8      	it	lt
 8003f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fa0:	3402      	adds	r4, #2
 8003fa2:	9305      	str	r3, [sp, #20]
 8003fa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004070 <_svfiprintf_r+0x1fc>
 8003fa8:	7821      	ldrb	r1, [r4, #0]
 8003faa:	2203      	movs	r2, #3
 8003fac:	4650      	mov	r0, sl
 8003fae:	f7fc f90f 	bl	80001d0 <memchr>
 8003fb2:	b140      	cbz	r0, 8003fc6 <_svfiprintf_r+0x152>
 8003fb4:	2340      	movs	r3, #64	; 0x40
 8003fb6:	eba0 000a 	sub.w	r0, r0, sl
 8003fba:	fa03 f000 	lsl.w	r0, r3, r0
 8003fbe:	9b04      	ldr	r3, [sp, #16]
 8003fc0:	4303      	orrs	r3, r0
 8003fc2:	3401      	adds	r4, #1
 8003fc4:	9304      	str	r3, [sp, #16]
 8003fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fca:	4826      	ldr	r0, [pc, #152]	; (8004064 <_svfiprintf_r+0x1f0>)
 8003fcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fd0:	2206      	movs	r2, #6
 8003fd2:	f7fc f8fd 	bl	80001d0 <memchr>
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d038      	beq.n	800404c <_svfiprintf_r+0x1d8>
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <_svfiprintf_r+0x1f4>)
 8003fdc:	bb1b      	cbnz	r3, 8004026 <_svfiprintf_r+0x1b2>
 8003fde:	9b03      	ldr	r3, [sp, #12]
 8003fe0:	3307      	adds	r3, #7
 8003fe2:	f023 0307 	bic.w	r3, r3, #7
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	9303      	str	r3, [sp, #12]
 8003fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fec:	4433      	add	r3, r6
 8003fee:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff0:	e767      	b.n	8003ec2 <_svfiprintf_r+0x4e>
 8003ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	e7a5      	b.n	8003f48 <_svfiprintf_r+0xd4>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	3401      	adds	r4, #1
 8004000:	9305      	str	r3, [sp, #20]
 8004002:	4619      	mov	r1, r3
 8004004:	f04f 0c0a 	mov.w	ip, #10
 8004008:	4620      	mov	r0, r4
 800400a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800400e:	3a30      	subs	r2, #48	; 0x30
 8004010:	2a09      	cmp	r2, #9
 8004012:	d903      	bls.n	800401c <_svfiprintf_r+0x1a8>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0c5      	beq.n	8003fa4 <_svfiprintf_r+0x130>
 8004018:	9105      	str	r1, [sp, #20]
 800401a:	e7c3      	b.n	8003fa4 <_svfiprintf_r+0x130>
 800401c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004020:	4604      	mov	r4, r0
 8004022:	2301      	movs	r3, #1
 8004024:	e7f0      	b.n	8004008 <_svfiprintf_r+0x194>
 8004026:	ab03      	add	r3, sp, #12
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	462a      	mov	r2, r5
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <_svfiprintf_r+0x1f8>)
 800402e:	a904      	add	r1, sp, #16
 8004030:	4638      	mov	r0, r7
 8004032:	f3af 8000 	nop.w
 8004036:	1c42      	adds	r2, r0, #1
 8004038:	4606      	mov	r6, r0
 800403a:	d1d6      	bne.n	8003fea <_svfiprintf_r+0x176>
 800403c:	89ab      	ldrh	r3, [r5, #12]
 800403e:	065b      	lsls	r3, r3, #25
 8004040:	f53f af2c 	bmi.w	8003e9c <_svfiprintf_r+0x28>
 8004044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004046:	b01d      	add	sp, #116	; 0x74
 8004048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404c:	ab03      	add	r3, sp, #12
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	462a      	mov	r2, r5
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <_svfiprintf_r+0x1f8>)
 8004054:	a904      	add	r1, sp, #16
 8004056:	4638      	mov	r0, r7
 8004058:	f000 f87a 	bl	8004150 <_printf_i>
 800405c:	e7eb      	b.n	8004036 <_svfiprintf_r+0x1c2>
 800405e:	bf00      	nop
 8004060:	0800544c 	.word	0x0800544c
 8004064:	08005456 	.word	0x08005456
 8004068:	00000000 	.word	0x00000000
 800406c:	08003dbd 	.word	0x08003dbd
 8004070:	08005452 	.word	0x08005452

08004074 <_printf_common>:
 8004074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004078:	4616      	mov	r6, r2
 800407a:	4699      	mov	r9, r3
 800407c:	688a      	ldr	r2, [r1, #8]
 800407e:	690b      	ldr	r3, [r1, #16]
 8004080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004084:	4293      	cmp	r3, r2
 8004086:	bfb8      	it	lt
 8004088:	4613      	movlt	r3, r2
 800408a:	6033      	str	r3, [r6, #0]
 800408c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004090:	4607      	mov	r7, r0
 8004092:	460c      	mov	r4, r1
 8004094:	b10a      	cbz	r2, 800409a <_printf_common+0x26>
 8004096:	3301      	adds	r3, #1
 8004098:	6033      	str	r3, [r6, #0]
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	0699      	lsls	r1, r3, #26
 800409e:	bf42      	ittt	mi
 80040a0:	6833      	ldrmi	r3, [r6, #0]
 80040a2:	3302      	addmi	r3, #2
 80040a4:	6033      	strmi	r3, [r6, #0]
 80040a6:	6825      	ldr	r5, [r4, #0]
 80040a8:	f015 0506 	ands.w	r5, r5, #6
 80040ac:	d106      	bne.n	80040bc <_printf_common+0x48>
 80040ae:	f104 0a19 	add.w	sl, r4, #25
 80040b2:	68e3      	ldr	r3, [r4, #12]
 80040b4:	6832      	ldr	r2, [r6, #0]
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	42ab      	cmp	r3, r5
 80040ba:	dc26      	bgt.n	800410a <_printf_common+0x96>
 80040bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040c0:	1e13      	subs	r3, r2, #0
 80040c2:	6822      	ldr	r2, [r4, #0]
 80040c4:	bf18      	it	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	0692      	lsls	r2, r2, #26
 80040ca:	d42b      	bmi.n	8004124 <_printf_common+0xb0>
 80040cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040d0:	4649      	mov	r1, r9
 80040d2:	4638      	mov	r0, r7
 80040d4:	47c0      	blx	r8
 80040d6:	3001      	adds	r0, #1
 80040d8:	d01e      	beq.n	8004118 <_printf_common+0xa4>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	68e5      	ldr	r5, [r4, #12]
 80040de:	6832      	ldr	r2, [r6, #0]
 80040e0:	f003 0306 	and.w	r3, r3, #6
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	bf08      	it	eq
 80040e8:	1aad      	subeq	r5, r5, r2
 80040ea:	68a3      	ldr	r3, [r4, #8]
 80040ec:	6922      	ldr	r2, [r4, #16]
 80040ee:	bf0c      	ite	eq
 80040f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f4:	2500      	movne	r5, #0
 80040f6:	4293      	cmp	r3, r2
 80040f8:	bfc4      	itt	gt
 80040fa:	1a9b      	subgt	r3, r3, r2
 80040fc:	18ed      	addgt	r5, r5, r3
 80040fe:	2600      	movs	r6, #0
 8004100:	341a      	adds	r4, #26
 8004102:	42b5      	cmp	r5, r6
 8004104:	d11a      	bne.n	800413c <_printf_common+0xc8>
 8004106:	2000      	movs	r0, #0
 8004108:	e008      	b.n	800411c <_printf_common+0xa8>
 800410a:	2301      	movs	r3, #1
 800410c:	4652      	mov	r2, sl
 800410e:	4649      	mov	r1, r9
 8004110:	4638      	mov	r0, r7
 8004112:	47c0      	blx	r8
 8004114:	3001      	adds	r0, #1
 8004116:	d103      	bne.n	8004120 <_printf_common+0xac>
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004120:	3501      	adds	r5, #1
 8004122:	e7c6      	b.n	80040b2 <_printf_common+0x3e>
 8004124:	18e1      	adds	r1, r4, r3
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	2030      	movs	r0, #48	; 0x30
 800412a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800412e:	4422      	add	r2, r4
 8004130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004138:	3302      	adds	r3, #2
 800413a:	e7c7      	b.n	80040cc <_printf_common+0x58>
 800413c:	2301      	movs	r3, #1
 800413e:	4622      	mov	r2, r4
 8004140:	4649      	mov	r1, r9
 8004142:	4638      	mov	r0, r7
 8004144:	47c0      	blx	r8
 8004146:	3001      	adds	r0, #1
 8004148:	d0e6      	beq.n	8004118 <_printf_common+0xa4>
 800414a:	3601      	adds	r6, #1
 800414c:	e7d9      	b.n	8004102 <_printf_common+0x8e>
	...

08004150 <_printf_i>:
 8004150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004154:	7e0f      	ldrb	r7, [r1, #24]
 8004156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004158:	2f78      	cmp	r7, #120	; 0x78
 800415a:	4691      	mov	r9, r2
 800415c:	4680      	mov	r8, r0
 800415e:	460c      	mov	r4, r1
 8004160:	469a      	mov	sl, r3
 8004162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004166:	d807      	bhi.n	8004178 <_printf_i+0x28>
 8004168:	2f62      	cmp	r7, #98	; 0x62
 800416a:	d80a      	bhi.n	8004182 <_printf_i+0x32>
 800416c:	2f00      	cmp	r7, #0
 800416e:	f000 80d8 	beq.w	8004322 <_printf_i+0x1d2>
 8004172:	2f58      	cmp	r7, #88	; 0x58
 8004174:	f000 80a3 	beq.w	80042be <_printf_i+0x16e>
 8004178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800417c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004180:	e03a      	b.n	80041f8 <_printf_i+0xa8>
 8004182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004186:	2b15      	cmp	r3, #21
 8004188:	d8f6      	bhi.n	8004178 <_printf_i+0x28>
 800418a:	a101      	add	r1, pc, #4	; (adr r1, 8004190 <_printf_i+0x40>)
 800418c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004190:	080041e9 	.word	0x080041e9
 8004194:	080041fd 	.word	0x080041fd
 8004198:	08004179 	.word	0x08004179
 800419c:	08004179 	.word	0x08004179
 80041a0:	08004179 	.word	0x08004179
 80041a4:	08004179 	.word	0x08004179
 80041a8:	080041fd 	.word	0x080041fd
 80041ac:	08004179 	.word	0x08004179
 80041b0:	08004179 	.word	0x08004179
 80041b4:	08004179 	.word	0x08004179
 80041b8:	08004179 	.word	0x08004179
 80041bc:	08004309 	.word	0x08004309
 80041c0:	0800422d 	.word	0x0800422d
 80041c4:	080042eb 	.word	0x080042eb
 80041c8:	08004179 	.word	0x08004179
 80041cc:	08004179 	.word	0x08004179
 80041d0:	0800432b 	.word	0x0800432b
 80041d4:	08004179 	.word	0x08004179
 80041d8:	0800422d 	.word	0x0800422d
 80041dc:	08004179 	.word	0x08004179
 80041e0:	08004179 	.word	0x08004179
 80041e4:	080042f3 	.word	0x080042f3
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	1d1a      	adds	r2, r3, #4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	602a      	str	r2, [r5, #0]
 80041f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0a3      	b.n	8004344 <_printf_i+0x1f4>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	6829      	ldr	r1, [r5, #0]
 8004200:	0606      	lsls	r6, r0, #24
 8004202:	f101 0304 	add.w	r3, r1, #4
 8004206:	d50a      	bpl.n	800421e <_printf_i+0xce>
 8004208:	680e      	ldr	r6, [r1, #0]
 800420a:	602b      	str	r3, [r5, #0]
 800420c:	2e00      	cmp	r6, #0
 800420e:	da03      	bge.n	8004218 <_printf_i+0xc8>
 8004210:	232d      	movs	r3, #45	; 0x2d
 8004212:	4276      	negs	r6, r6
 8004214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004218:	485e      	ldr	r0, [pc, #376]	; (8004394 <_printf_i+0x244>)
 800421a:	230a      	movs	r3, #10
 800421c:	e019      	b.n	8004252 <_printf_i+0x102>
 800421e:	680e      	ldr	r6, [r1, #0]
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004226:	bf18      	it	ne
 8004228:	b236      	sxthne	r6, r6
 800422a:	e7ef      	b.n	800420c <_printf_i+0xbc>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	6820      	ldr	r0, [r4, #0]
 8004230:	1d19      	adds	r1, r3, #4
 8004232:	6029      	str	r1, [r5, #0]
 8004234:	0601      	lsls	r1, r0, #24
 8004236:	d501      	bpl.n	800423c <_printf_i+0xec>
 8004238:	681e      	ldr	r6, [r3, #0]
 800423a:	e002      	b.n	8004242 <_printf_i+0xf2>
 800423c:	0646      	lsls	r6, r0, #25
 800423e:	d5fb      	bpl.n	8004238 <_printf_i+0xe8>
 8004240:	881e      	ldrh	r6, [r3, #0]
 8004242:	4854      	ldr	r0, [pc, #336]	; (8004394 <_printf_i+0x244>)
 8004244:	2f6f      	cmp	r7, #111	; 0x6f
 8004246:	bf0c      	ite	eq
 8004248:	2308      	moveq	r3, #8
 800424a:	230a      	movne	r3, #10
 800424c:	2100      	movs	r1, #0
 800424e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004252:	6865      	ldr	r5, [r4, #4]
 8004254:	60a5      	str	r5, [r4, #8]
 8004256:	2d00      	cmp	r5, #0
 8004258:	bfa2      	ittt	ge
 800425a:	6821      	ldrge	r1, [r4, #0]
 800425c:	f021 0104 	bicge.w	r1, r1, #4
 8004260:	6021      	strge	r1, [r4, #0]
 8004262:	b90e      	cbnz	r6, 8004268 <_printf_i+0x118>
 8004264:	2d00      	cmp	r5, #0
 8004266:	d04d      	beq.n	8004304 <_printf_i+0x1b4>
 8004268:	4615      	mov	r5, r2
 800426a:	fbb6 f1f3 	udiv	r1, r6, r3
 800426e:	fb03 6711 	mls	r7, r3, r1, r6
 8004272:	5dc7      	ldrb	r7, [r0, r7]
 8004274:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004278:	4637      	mov	r7, r6
 800427a:	42bb      	cmp	r3, r7
 800427c:	460e      	mov	r6, r1
 800427e:	d9f4      	bls.n	800426a <_printf_i+0x11a>
 8004280:	2b08      	cmp	r3, #8
 8004282:	d10b      	bne.n	800429c <_printf_i+0x14c>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	07de      	lsls	r6, r3, #31
 8004288:	d508      	bpl.n	800429c <_printf_i+0x14c>
 800428a:	6923      	ldr	r3, [r4, #16]
 800428c:	6861      	ldr	r1, [r4, #4]
 800428e:	4299      	cmp	r1, r3
 8004290:	bfde      	ittt	le
 8004292:	2330      	movle	r3, #48	; 0x30
 8004294:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004298:	f105 35ff 	addle.w	r5, r5, #4294967295
 800429c:	1b52      	subs	r2, r2, r5
 800429e:	6122      	str	r2, [r4, #16]
 80042a0:	f8cd a000 	str.w	sl, [sp]
 80042a4:	464b      	mov	r3, r9
 80042a6:	aa03      	add	r2, sp, #12
 80042a8:	4621      	mov	r1, r4
 80042aa:	4640      	mov	r0, r8
 80042ac:	f7ff fee2 	bl	8004074 <_printf_common>
 80042b0:	3001      	adds	r0, #1
 80042b2:	d14c      	bne.n	800434e <_printf_i+0x1fe>
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	b004      	add	sp, #16
 80042ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042be:	4835      	ldr	r0, [pc, #212]	; (8004394 <_printf_i+0x244>)
 80042c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042c4:	6829      	ldr	r1, [r5, #0]
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80042cc:	6029      	str	r1, [r5, #0]
 80042ce:	061d      	lsls	r5, r3, #24
 80042d0:	d514      	bpl.n	80042fc <_printf_i+0x1ac>
 80042d2:	07df      	lsls	r7, r3, #31
 80042d4:	bf44      	itt	mi
 80042d6:	f043 0320 	orrmi.w	r3, r3, #32
 80042da:	6023      	strmi	r3, [r4, #0]
 80042dc:	b91e      	cbnz	r6, 80042e6 <_printf_i+0x196>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	f023 0320 	bic.w	r3, r3, #32
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	2310      	movs	r3, #16
 80042e8:	e7b0      	b.n	800424c <_printf_i+0xfc>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	f043 0320 	orr.w	r3, r3, #32
 80042f0:	6023      	str	r3, [r4, #0]
 80042f2:	2378      	movs	r3, #120	; 0x78
 80042f4:	4828      	ldr	r0, [pc, #160]	; (8004398 <_printf_i+0x248>)
 80042f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042fa:	e7e3      	b.n	80042c4 <_printf_i+0x174>
 80042fc:	0659      	lsls	r1, r3, #25
 80042fe:	bf48      	it	mi
 8004300:	b2b6      	uxthmi	r6, r6
 8004302:	e7e6      	b.n	80042d2 <_printf_i+0x182>
 8004304:	4615      	mov	r5, r2
 8004306:	e7bb      	b.n	8004280 <_printf_i+0x130>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	6826      	ldr	r6, [r4, #0]
 800430c:	6961      	ldr	r1, [r4, #20]
 800430e:	1d18      	adds	r0, r3, #4
 8004310:	6028      	str	r0, [r5, #0]
 8004312:	0635      	lsls	r5, r6, #24
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	d501      	bpl.n	800431c <_printf_i+0x1cc>
 8004318:	6019      	str	r1, [r3, #0]
 800431a:	e002      	b.n	8004322 <_printf_i+0x1d2>
 800431c:	0670      	lsls	r0, r6, #25
 800431e:	d5fb      	bpl.n	8004318 <_printf_i+0x1c8>
 8004320:	8019      	strh	r1, [r3, #0]
 8004322:	2300      	movs	r3, #0
 8004324:	6123      	str	r3, [r4, #16]
 8004326:	4615      	mov	r5, r2
 8004328:	e7ba      	b.n	80042a0 <_printf_i+0x150>
 800432a:	682b      	ldr	r3, [r5, #0]
 800432c:	1d1a      	adds	r2, r3, #4
 800432e:	602a      	str	r2, [r5, #0]
 8004330:	681d      	ldr	r5, [r3, #0]
 8004332:	6862      	ldr	r2, [r4, #4]
 8004334:	2100      	movs	r1, #0
 8004336:	4628      	mov	r0, r5
 8004338:	f7fb ff4a 	bl	80001d0 <memchr>
 800433c:	b108      	cbz	r0, 8004342 <_printf_i+0x1f2>
 800433e:	1b40      	subs	r0, r0, r5
 8004340:	6060      	str	r0, [r4, #4]
 8004342:	6863      	ldr	r3, [r4, #4]
 8004344:	6123      	str	r3, [r4, #16]
 8004346:	2300      	movs	r3, #0
 8004348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800434c:	e7a8      	b.n	80042a0 <_printf_i+0x150>
 800434e:	6923      	ldr	r3, [r4, #16]
 8004350:	462a      	mov	r2, r5
 8004352:	4649      	mov	r1, r9
 8004354:	4640      	mov	r0, r8
 8004356:	47d0      	blx	sl
 8004358:	3001      	adds	r0, #1
 800435a:	d0ab      	beq.n	80042b4 <_printf_i+0x164>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	079b      	lsls	r3, r3, #30
 8004360:	d413      	bmi.n	800438a <_printf_i+0x23a>
 8004362:	68e0      	ldr	r0, [r4, #12]
 8004364:	9b03      	ldr	r3, [sp, #12]
 8004366:	4298      	cmp	r0, r3
 8004368:	bfb8      	it	lt
 800436a:	4618      	movlt	r0, r3
 800436c:	e7a4      	b.n	80042b8 <_printf_i+0x168>
 800436e:	2301      	movs	r3, #1
 8004370:	4632      	mov	r2, r6
 8004372:	4649      	mov	r1, r9
 8004374:	4640      	mov	r0, r8
 8004376:	47d0      	blx	sl
 8004378:	3001      	adds	r0, #1
 800437a:	d09b      	beq.n	80042b4 <_printf_i+0x164>
 800437c:	3501      	adds	r5, #1
 800437e:	68e3      	ldr	r3, [r4, #12]
 8004380:	9903      	ldr	r1, [sp, #12]
 8004382:	1a5b      	subs	r3, r3, r1
 8004384:	42ab      	cmp	r3, r5
 8004386:	dcf2      	bgt.n	800436e <_printf_i+0x21e>
 8004388:	e7eb      	b.n	8004362 <_printf_i+0x212>
 800438a:	2500      	movs	r5, #0
 800438c:	f104 0619 	add.w	r6, r4, #25
 8004390:	e7f5      	b.n	800437e <_printf_i+0x22e>
 8004392:	bf00      	nop
 8004394:	0800545d 	.word	0x0800545d
 8004398:	0800546e 	.word	0x0800546e

0800439c <memcpy>:
 800439c:	440a      	add	r2, r1
 800439e:	4291      	cmp	r1, r2
 80043a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043a4:	d100      	bne.n	80043a8 <memcpy+0xc>
 80043a6:	4770      	bx	lr
 80043a8:	b510      	push	{r4, lr}
 80043aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043b2:	4291      	cmp	r1, r2
 80043b4:	d1f9      	bne.n	80043aa <memcpy+0xe>
 80043b6:	bd10      	pop	{r4, pc}

080043b8 <memmove>:
 80043b8:	4288      	cmp	r0, r1
 80043ba:	b510      	push	{r4, lr}
 80043bc:	eb01 0402 	add.w	r4, r1, r2
 80043c0:	d902      	bls.n	80043c8 <memmove+0x10>
 80043c2:	4284      	cmp	r4, r0
 80043c4:	4623      	mov	r3, r4
 80043c6:	d807      	bhi.n	80043d8 <memmove+0x20>
 80043c8:	1e43      	subs	r3, r0, #1
 80043ca:	42a1      	cmp	r1, r4
 80043cc:	d008      	beq.n	80043e0 <memmove+0x28>
 80043ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043d6:	e7f8      	b.n	80043ca <memmove+0x12>
 80043d8:	4402      	add	r2, r0
 80043da:	4601      	mov	r1, r0
 80043dc:	428a      	cmp	r2, r1
 80043de:	d100      	bne.n	80043e2 <memmove+0x2a>
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043ea:	e7f7      	b.n	80043dc <memmove+0x24>

080043ec <_free_r>:
 80043ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ee:	2900      	cmp	r1, #0
 80043f0:	d044      	beq.n	800447c <_free_r+0x90>
 80043f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f6:	9001      	str	r0, [sp, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f1a1 0404 	sub.w	r4, r1, #4
 80043fe:	bfb8      	it	lt
 8004400:	18e4      	addlt	r4, r4, r3
 8004402:	f000 f913 	bl	800462c <__malloc_lock>
 8004406:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <_free_r+0x94>)
 8004408:	9801      	ldr	r0, [sp, #4]
 800440a:	6813      	ldr	r3, [r2, #0]
 800440c:	b933      	cbnz	r3, 800441c <_free_r+0x30>
 800440e:	6063      	str	r3, [r4, #4]
 8004410:	6014      	str	r4, [r2, #0]
 8004412:	b003      	add	sp, #12
 8004414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004418:	f000 b90e 	b.w	8004638 <__malloc_unlock>
 800441c:	42a3      	cmp	r3, r4
 800441e:	d908      	bls.n	8004432 <_free_r+0x46>
 8004420:	6825      	ldr	r5, [r4, #0]
 8004422:	1961      	adds	r1, r4, r5
 8004424:	428b      	cmp	r3, r1
 8004426:	bf01      	itttt	eq
 8004428:	6819      	ldreq	r1, [r3, #0]
 800442a:	685b      	ldreq	r3, [r3, #4]
 800442c:	1949      	addeq	r1, r1, r5
 800442e:	6021      	streq	r1, [r4, #0]
 8004430:	e7ed      	b.n	800440e <_free_r+0x22>
 8004432:	461a      	mov	r2, r3
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b10b      	cbz	r3, 800443c <_free_r+0x50>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d9fa      	bls.n	8004432 <_free_r+0x46>
 800443c:	6811      	ldr	r1, [r2, #0]
 800443e:	1855      	adds	r5, r2, r1
 8004440:	42a5      	cmp	r5, r4
 8004442:	d10b      	bne.n	800445c <_free_r+0x70>
 8004444:	6824      	ldr	r4, [r4, #0]
 8004446:	4421      	add	r1, r4
 8004448:	1854      	adds	r4, r2, r1
 800444a:	42a3      	cmp	r3, r4
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	d1e0      	bne.n	8004412 <_free_r+0x26>
 8004450:	681c      	ldr	r4, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	6053      	str	r3, [r2, #4]
 8004456:	4421      	add	r1, r4
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	e7da      	b.n	8004412 <_free_r+0x26>
 800445c:	d902      	bls.n	8004464 <_free_r+0x78>
 800445e:	230c      	movs	r3, #12
 8004460:	6003      	str	r3, [r0, #0]
 8004462:	e7d6      	b.n	8004412 <_free_r+0x26>
 8004464:	6825      	ldr	r5, [r4, #0]
 8004466:	1961      	adds	r1, r4, r5
 8004468:	428b      	cmp	r3, r1
 800446a:	bf04      	itt	eq
 800446c:	6819      	ldreq	r1, [r3, #0]
 800446e:	685b      	ldreq	r3, [r3, #4]
 8004470:	6063      	str	r3, [r4, #4]
 8004472:	bf04      	itt	eq
 8004474:	1949      	addeq	r1, r1, r5
 8004476:	6021      	streq	r1, [r4, #0]
 8004478:	6054      	str	r4, [r2, #4]
 800447a:	e7ca      	b.n	8004412 <_free_r+0x26>
 800447c:	b003      	add	sp, #12
 800447e:	bd30      	pop	{r4, r5, pc}
 8004480:	20000584 	.word	0x20000584

08004484 <sbrk_aligned>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	4e0e      	ldr	r6, [pc, #56]	; (80044c0 <sbrk_aligned+0x3c>)
 8004488:	460c      	mov	r4, r1
 800448a:	6831      	ldr	r1, [r6, #0]
 800448c:	4605      	mov	r5, r0
 800448e:	b911      	cbnz	r1, 8004496 <sbrk_aligned+0x12>
 8004490:	f000 f8bc 	bl	800460c <_sbrk_r>
 8004494:	6030      	str	r0, [r6, #0]
 8004496:	4621      	mov	r1, r4
 8004498:	4628      	mov	r0, r5
 800449a:	f000 f8b7 	bl	800460c <_sbrk_r>
 800449e:	1c43      	adds	r3, r0, #1
 80044a0:	d00a      	beq.n	80044b8 <sbrk_aligned+0x34>
 80044a2:	1cc4      	adds	r4, r0, #3
 80044a4:	f024 0403 	bic.w	r4, r4, #3
 80044a8:	42a0      	cmp	r0, r4
 80044aa:	d007      	beq.n	80044bc <sbrk_aligned+0x38>
 80044ac:	1a21      	subs	r1, r4, r0
 80044ae:	4628      	mov	r0, r5
 80044b0:	f000 f8ac 	bl	800460c <_sbrk_r>
 80044b4:	3001      	adds	r0, #1
 80044b6:	d101      	bne.n	80044bc <sbrk_aligned+0x38>
 80044b8:	f04f 34ff 	mov.w	r4, #4294967295
 80044bc:	4620      	mov	r0, r4
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	20000588 	.word	0x20000588

080044c4 <_malloc_r>:
 80044c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c8:	1ccd      	adds	r5, r1, #3
 80044ca:	f025 0503 	bic.w	r5, r5, #3
 80044ce:	3508      	adds	r5, #8
 80044d0:	2d0c      	cmp	r5, #12
 80044d2:	bf38      	it	cc
 80044d4:	250c      	movcc	r5, #12
 80044d6:	2d00      	cmp	r5, #0
 80044d8:	4607      	mov	r7, r0
 80044da:	db01      	blt.n	80044e0 <_malloc_r+0x1c>
 80044dc:	42a9      	cmp	r1, r5
 80044de:	d905      	bls.n	80044ec <_malloc_r+0x28>
 80044e0:	230c      	movs	r3, #12
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	2600      	movs	r6, #0
 80044e6:	4630      	mov	r0, r6
 80044e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ec:	4e2e      	ldr	r6, [pc, #184]	; (80045a8 <_malloc_r+0xe4>)
 80044ee:	f000 f89d 	bl	800462c <__malloc_lock>
 80044f2:	6833      	ldr	r3, [r6, #0]
 80044f4:	461c      	mov	r4, r3
 80044f6:	bb34      	cbnz	r4, 8004546 <_malloc_r+0x82>
 80044f8:	4629      	mov	r1, r5
 80044fa:	4638      	mov	r0, r7
 80044fc:	f7ff ffc2 	bl	8004484 <sbrk_aligned>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	4604      	mov	r4, r0
 8004504:	d14d      	bne.n	80045a2 <_malloc_r+0xde>
 8004506:	6834      	ldr	r4, [r6, #0]
 8004508:	4626      	mov	r6, r4
 800450a:	2e00      	cmp	r6, #0
 800450c:	d140      	bne.n	8004590 <_malloc_r+0xcc>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	4631      	mov	r1, r6
 8004512:	4638      	mov	r0, r7
 8004514:	eb04 0803 	add.w	r8, r4, r3
 8004518:	f000 f878 	bl	800460c <_sbrk_r>
 800451c:	4580      	cmp	r8, r0
 800451e:	d13a      	bne.n	8004596 <_malloc_r+0xd2>
 8004520:	6821      	ldr	r1, [r4, #0]
 8004522:	3503      	adds	r5, #3
 8004524:	1a6d      	subs	r5, r5, r1
 8004526:	f025 0503 	bic.w	r5, r5, #3
 800452a:	3508      	adds	r5, #8
 800452c:	2d0c      	cmp	r5, #12
 800452e:	bf38      	it	cc
 8004530:	250c      	movcc	r5, #12
 8004532:	4629      	mov	r1, r5
 8004534:	4638      	mov	r0, r7
 8004536:	f7ff ffa5 	bl	8004484 <sbrk_aligned>
 800453a:	3001      	adds	r0, #1
 800453c:	d02b      	beq.n	8004596 <_malloc_r+0xd2>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	442b      	add	r3, r5
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	e00e      	b.n	8004564 <_malloc_r+0xa0>
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	1b52      	subs	r2, r2, r5
 800454a:	d41e      	bmi.n	800458a <_malloc_r+0xc6>
 800454c:	2a0b      	cmp	r2, #11
 800454e:	d916      	bls.n	800457e <_malloc_r+0xba>
 8004550:	1961      	adds	r1, r4, r5
 8004552:	42a3      	cmp	r3, r4
 8004554:	6025      	str	r5, [r4, #0]
 8004556:	bf18      	it	ne
 8004558:	6059      	strne	r1, [r3, #4]
 800455a:	6863      	ldr	r3, [r4, #4]
 800455c:	bf08      	it	eq
 800455e:	6031      	streq	r1, [r6, #0]
 8004560:	5162      	str	r2, [r4, r5]
 8004562:	604b      	str	r3, [r1, #4]
 8004564:	4638      	mov	r0, r7
 8004566:	f104 060b 	add.w	r6, r4, #11
 800456a:	f000 f865 	bl	8004638 <__malloc_unlock>
 800456e:	f026 0607 	bic.w	r6, r6, #7
 8004572:	1d23      	adds	r3, r4, #4
 8004574:	1af2      	subs	r2, r6, r3
 8004576:	d0b6      	beq.n	80044e6 <_malloc_r+0x22>
 8004578:	1b9b      	subs	r3, r3, r6
 800457a:	50a3      	str	r3, [r4, r2]
 800457c:	e7b3      	b.n	80044e6 <_malloc_r+0x22>
 800457e:	6862      	ldr	r2, [r4, #4]
 8004580:	42a3      	cmp	r3, r4
 8004582:	bf0c      	ite	eq
 8004584:	6032      	streq	r2, [r6, #0]
 8004586:	605a      	strne	r2, [r3, #4]
 8004588:	e7ec      	b.n	8004564 <_malloc_r+0xa0>
 800458a:	4623      	mov	r3, r4
 800458c:	6864      	ldr	r4, [r4, #4]
 800458e:	e7b2      	b.n	80044f6 <_malloc_r+0x32>
 8004590:	4634      	mov	r4, r6
 8004592:	6876      	ldr	r6, [r6, #4]
 8004594:	e7b9      	b.n	800450a <_malloc_r+0x46>
 8004596:	230c      	movs	r3, #12
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4638      	mov	r0, r7
 800459c:	f000 f84c 	bl	8004638 <__malloc_unlock>
 80045a0:	e7a1      	b.n	80044e6 <_malloc_r+0x22>
 80045a2:	6025      	str	r5, [r4, #0]
 80045a4:	e7de      	b.n	8004564 <_malloc_r+0xa0>
 80045a6:	bf00      	nop
 80045a8:	20000584 	.word	0x20000584

080045ac <_realloc_r>:
 80045ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b0:	4680      	mov	r8, r0
 80045b2:	4614      	mov	r4, r2
 80045b4:	460e      	mov	r6, r1
 80045b6:	b921      	cbnz	r1, 80045c2 <_realloc_r+0x16>
 80045b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045bc:	4611      	mov	r1, r2
 80045be:	f7ff bf81 	b.w	80044c4 <_malloc_r>
 80045c2:	b92a      	cbnz	r2, 80045d0 <_realloc_r+0x24>
 80045c4:	f7ff ff12 	bl	80043ec <_free_r>
 80045c8:	4625      	mov	r5, r4
 80045ca:	4628      	mov	r0, r5
 80045cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d0:	f000 f838 	bl	8004644 <_malloc_usable_size_r>
 80045d4:	4284      	cmp	r4, r0
 80045d6:	4607      	mov	r7, r0
 80045d8:	d802      	bhi.n	80045e0 <_realloc_r+0x34>
 80045da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045de:	d812      	bhi.n	8004606 <_realloc_r+0x5a>
 80045e0:	4621      	mov	r1, r4
 80045e2:	4640      	mov	r0, r8
 80045e4:	f7ff ff6e 	bl	80044c4 <_malloc_r>
 80045e8:	4605      	mov	r5, r0
 80045ea:	2800      	cmp	r0, #0
 80045ec:	d0ed      	beq.n	80045ca <_realloc_r+0x1e>
 80045ee:	42bc      	cmp	r4, r7
 80045f0:	4622      	mov	r2, r4
 80045f2:	4631      	mov	r1, r6
 80045f4:	bf28      	it	cs
 80045f6:	463a      	movcs	r2, r7
 80045f8:	f7ff fed0 	bl	800439c <memcpy>
 80045fc:	4631      	mov	r1, r6
 80045fe:	4640      	mov	r0, r8
 8004600:	f7ff fef4 	bl	80043ec <_free_r>
 8004604:	e7e1      	b.n	80045ca <_realloc_r+0x1e>
 8004606:	4635      	mov	r5, r6
 8004608:	e7df      	b.n	80045ca <_realloc_r+0x1e>
	...

0800460c <_sbrk_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4d06      	ldr	r5, [pc, #24]	; (8004628 <_sbrk_r+0x1c>)
 8004610:	2300      	movs	r3, #0
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	f7fc fbe6 	bl	8000de8 <_sbrk>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_sbrk_r+0x1a>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_sbrk_r+0x1a>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	2000058c 	.word	0x2000058c

0800462c <__malloc_lock>:
 800462c:	4801      	ldr	r0, [pc, #4]	; (8004634 <__malloc_lock+0x8>)
 800462e:	f000 b811 	b.w	8004654 <__retarget_lock_acquire_recursive>
 8004632:	bf00      	nop
 8004634:	20000590 	.word	0x20000590

08004638 <__malloc_unlock>:
 8004638:	4801      	ldr	r0, [pc, #4]	; (8004640 <__malloc_unlock+0x8>)
 800463a:	f000 b80c 	b.w	8004656 <__retarget_lock_release_recursive>
 800463e:	bf00      	nop
 8004640:	20000590 	.word	0x20000590

08004644 <_malloc_usable_size_r>:
 8004644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004648:	1f18      	subs	r0, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	bfbc      	itt	lt
 800464e:	580b      	ldrlt	r3, [r1, r0]
 8004650:	18c0      	addlt	r0, r0, r3
 8004652:	4770      	bx	lr

08004654 <__retarget_lock_acquire_recursive>:
 8004654:	4770      	bx	lr

08004656 <__retarget_lock_release_recursive>:
 8004656:	4770      	bx	lr

08004658 <_init>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr

08004664 <_fini>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr
